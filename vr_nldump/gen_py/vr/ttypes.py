#
# Autogenerated by Sandesh Compiler (1.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
# Copyright (c) 2013 Juniper Networks, Inc. All rights reserved.
#

from vr_nldump.pysandesh.Thrift import TType, TMessageType, TException

from vr_nldump.pysandesh.transport import TTransport
from vr_nldump.pysandesh.protocol import TBinaryProtocol, TProtocol
try:
  from vr_nldump.pysandesh.protocol import fastbinary
except:
  fastbinary = None

import cStringIO
import uuid
from vr_nldump.pysandesh import sandesh_base
from vr_nldump.pysandesh.sandesh_http import SandeshHttp
from vr_nldump.pysandesh.sandesh_uve import SandeshUVETypeMaps
from vr_nldump.pysandesh.util import UTCTimestampUsec, UTCTimestampUsecToString
from vr_nldump.pysandesh.gen_py.sandesh.constants import *


class sandesh_op(object):
  ADD = 0
  GET = 1
  DELETE = 2
  DUMP = 3
  RESPONSE = 4
  RESET = 5

  _VALUES_TO_NAMES = {
    0: "ADD",
    1: "GET",
    2: "DELETE",
    3: "DUMP",
    4: "RESPONSE",
    5: "RESET",
  }

  _NAMES_TO_VALUES = {
    "ADD": 0,
    "GET": 1,
    "DELETE": 2,
    "DUMP": 3,
    "RESPONSE": 4,
    "RESET": 5,
  }

class flow_op(object):
  FLOW_SET = 0
  FLOW_LIST = 1
  FLOW_TABLE_GET = 2

  _VALUES_TO_NAMES = {
    0: "FLOW_SET",
    1: "FLOW_LIST",
    2: "FLOW_TABLE_GET",
  }

  _NAMES_TO_VALUES = {
    "FLOW_SET": 0,
    "FLOW_LIST": 1,
    "FLOW_TABLE_GET": 2,
  }


class sandesh_hdr(object):
  """
  Attributes:
   - h_op
   - h_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, 0, ), # 1
    (2, TType.I32, 'h_id', None, 0, ), # 2
  )

  def __init__(self, h_op=None, h_id=None,):
    self.h_op = h_op
    self.h_id = h_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return 0
    read_cnt = 0
    length = iprot.readStructBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          (length, self.h_id) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readStructEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeStructBegin('sandesh_hdr') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.h_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_id', TType.I32, 2, annotations) < 0: return -1
      if oprot.writeI32(self.h_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeStructEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def log(self):
    log_str = cStringIO.StringIO()
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.h_id is not None:
      log_str.write('h_id = ')
      log_str.write(str(self.h_id))
      log_str.write('  ')
    return log_str.getvalue()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_nexthop_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.BYTE, 'nhr_type', None, None, ), # 2
    (3, TType.BYTE, 'nhr_family', None, None, ), # 3
    (4, TType.I32, 'nhr_id', None, None, ), # 4
    (5, TType.I32, 'nhr_rid', None, None, ), # 5
    (6, TType.I32, 'nhr_encap_oif_id', None, None, ), # 6
    (7, TType.I32, 'nhr_encap_len', None, None, ), # 7
    (8, TType.I32, 'nhr_encap_family', None, None, ), # 8
    (9, TType.I32, 'nhr_vrf', None, None, ), # 9
    (10, TType.I32, 'nhr_tun_sip', None, None, ), # 10
    (11, TType.I32, 'nhr_tun_dip', None, None, ), # 11
    (12, TType.I16, 'nhr_tun_sport', None, None, ), # 12
    (13, TType.I16, 'nhr_tun_dport', None, None, ), # 13
    (14, TType.I32, 'nhr_ref_cnt', None, None, ), # 14
    (15, TType.I32, 'nhr_marker', None, None, ), # 15
    (16, TType.U32, 'nhr_flags', None, None, ), # 16
    (17, TType.LIST, 'nhr_encap', (TType.BYTE,None), None, ), # 17
    (18, TType.LIST, 'nhr_nh_list', (TType.I32,None), None, ), # 18
    (19, TType.I32, 'nhr_label', None, None, ), # 19
    (20, TType.LIST, 'nhr_label_list', (TType.I32,None), None, ), # 20
  )

  def __init__(self, h_op=None, nhr_type=None, nhr_family=None, nhr_id=None, nhr_rid=None, nhr_encap_oif_id=None, nhr_encap_len=None, nhr_encap_family=None, nhr_vrf=None, nhr_tun_sip=None, nhr_tun_dip=None, nhr_tun_sport=None, nhr_tun_dport=None, nhr_ref_cnt=None, nhr_marker=None, nhr_flags=None, nhr_encap=None, nhr_nh_list=None, nhr_label=None, nhr_label_list=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.nhr_type = nhr_type
    self.nhr_family = nhr_family
    self.nhr_id = nhr_id
    self.nhr_rid = nhr_rid
    self.nhr_encap_oif_id = nhr_encap_oif_id
    self.nhr_encap_len = nhr_encap_len
    self.nhr_encap_family = nhr_encap_family
    self.nhr_vrf = nhr_vrf
    self.nhr_tun_sip = nhr_tun_sip
    self.nhr_tun_dip = nhr_tun_dip
    self.nhr_tun_sport = nhr_tun_sport
    self.nhr_tun_dport = nhr_tun_dport
    self.nhr_ref_cnt = nhr_ref_cnt
    self.nhr_marker = nhr_marker
    self.nhr_flags = nhr_flags
    self.nhr_encap = nhr_encap
    self.nhr_nh_list = nhr_nh_list
    self.nhr_label = nhr_label
    self.nhr_label_list = nhr_label_list
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3944010133
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_nexthop_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.nhr_type is not None:
      log_str.write('nhr_type = ')
      log_str.write(hex(self.nhr_type))
      log_str.write('  ')
    if self.nhr_family is not None:
      log_str.write('nhr_family = ')
      log_str.write(hex(self.nhr_family))
      log_str.write('  ')
    if self.nhr_id is not None:
      log_str.write('nhr_id = ')
      log_str.write(str(self.nhr_id))
      log_str.write('  ')
    if self.nhr_rid is not None:
      log_str.write('nhr_rid = ')
      log_str.write(str(self.nhr_rid))
      log_str.write('  ')
    if self.nhr_encap_oif_id is not None:
      log_str.write('nhr_encap_oif_id = ')
      log_str.write(str(self.nhr_encap_oif_id))
      log_str.write('  ')
    if self.nhr_encap_len is not None:
      log_str.write('nhr_encap_len = ')
      log_str.write(str(self.nhr_encap_len))
      log_str.write('  ')
    if self.nhr_encap_family is not None:
      log_str.write('nhr_encap_family = ')
      log_str.write(str(self.nhr_encap_family))
      log_str.write('  ')
    if self.nhr_vrf is not None:
      log_str.write('nhr_vrf = ')
      log_str.write(str(self.nhr_vrf))
      log_str.write('  ')
    if self.nhr_tun_sip is not None:
      log_str.write('nhr_tun_sip = ')
      log_str.write(str(self.nhr_tun_sip))
      log_str.write('  ')
    if self.nhr_tun_dip is not None:
      log_str.write('nhr_tun_dip = ')
      log_str.write(str(self.nhr_tun_dip))
      log_str.write('  ')
    if self.nhr_tun_sport is not None:
      log_str.write('nhr_tun_sport = ')
      log_str.write(str(self.nhr_tun_sport))
      log_str.write('  ')
    if self.nhr_tun_dport is not None:
      log_str.write('nhr_tun_dport = ')
      log_str.write(str(self.nhr_tun_dport))
      log_str.write('  ')
    if self.nhr_ref_cnt is not None:
      log_str.write('nhr_ref_cnt = ')
      log_str.write(str(self.nhr_ref_cnt))
      log_str.write('  ')
    if self.nhr_marker is not None:
      log_str.write('nhr_marker = ')
      log_str.write(str(self.nhr_marker))
      log_str.write('  ')
    if self.nhr_flags is not None:
      log_str.write('nhr_flags = ')
      log_str.write(str(self.nhr_flags))
      log_str.write('  ')
    if self.nhr_encap is not None:
      log_str.write('nhr_encap = ')
      log_str.write('[ ')
      for iter0 in self.nhr_encap:
        log_str.write(hex(iter0))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.nhr_nh_list is not None:
      log_str.write('nhr_nh_list = ')
      log_str.write('[ ')
      for iter1 in self.nhr_nh_list:
        log_str.write(str(iter1))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.nhr_label is not None:
      log_str.write('nhr_label = ')
      log_str.write(str(self.nhr_label))
      log_str.write('  ')
    if self.nhr_label_list is not None:
      log_str.write('nhr_label_list = ')
      log_str.write('[ ')
      for iter2 in self.nhr_label_list:
        log_str.write(str(iter2))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          (length, self.nhr_type) = iprot.readByte();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          (length, self.nhr_family) = iprot.readByte();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          (length, self.nhr_id) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          (length, self.nhr_rid) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          (length, self.nhr_encap_oif_id) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          (length, self.nhr_encap_len) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          (length, self.nhr_encap_family) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          (length, self.nhr_vrf) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          (length, self.nhr_tun_sip) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          (length, self.nhr_tun_dip) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          (length, self.nhr_tun_sport) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          (length, self.nhr_tun_dport) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          (length, self.nhr_ref_cnt) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          (length, self.nhr_marker) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.U32:
          (length, self.nhr_flags) = iprot.readU32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.nhr_encap = []
          (length, _etype6, _size3) = iprot.readListBegin()
          read_cnt += length
          for _i7 in xrange(_size3):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem8) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.nhr_encap.append(_elem8)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.LIST:
          self.nhr_nh_list = []
          (length, _etype12, _size9) = iprot.readListBegin()
          read_cnt += length
          for _i13 in xrange(_size9):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem14) = iprot.readI32();
            if length < 0: return -1
            read_cnt += length
            self.nhr_nh_list.append(_elem14)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          (length, self.nhr_label) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.nhr_label_list = []
          (length, _etype18, _size15) = iprot.readListBegin()
          read_cnt += length
          for _i19 in xrange(_size15):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem20) = iprot.readI32();
            if length < 0: return -1
            read_cnt += length
            self.nhr_label_list.append(_elem20)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_nexthop_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_type is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_type', TType.BYTE, 2, annotations) < 0: return -1
      if oprot.writeByte(self.nhr_type) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_family is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_family', TType.BYTE, 3, annotations) < 0: return -1
      if oprot.writeByte(self.nhr_family) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_id', TType.I32, 4, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_rid', TType.I32, 5, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_encap_oif_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_encap_oif_id', TType.I32, 6, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_encap_oif_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_encap_len is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_encap_len', TType.I32, 7, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_encap_len) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_encap_family is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_encap_family', TType.I32, 8, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_encap_family) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_vrf is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_vrf', TType.I32, 9, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_vrf) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_tun_sip is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_tun_sip', TType.I32, 10, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_tun_sip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_tun_dip is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_tun_dip', TType.I32, 11, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_tun_dip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_tun_sport is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_tun_sport', TType.I16, 12, annotations) < 0: return -1
      if oprot.writeI16(self.nhr_tun_sport) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_tun_dport is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_tun_dport', TType.I16, 13, annotations) < 0: return -1
      if oprot.writeI16(self.nhr_tun_dport) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_ref_cnt is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_ref_cnt', TType.I32, 14, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_ref_cnt) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_marker is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_marker', TType.I32, 15, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_marker) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_flags is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_flags', TType.U32, 16, annotations) < 0: return -1
      if oprot.writeU32(self.nhr_flags) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_encap is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_encap', TType.LIST, 17, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.nhr_encap)) < 0: return -1
      for iter21 in self.nhr_encap:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter21) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_nh_list is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_nh_list', TType.LIST, 18, annotations) < 0: return -1
      if oprot.writeListBegin(TType.I32, len(self.nhr_nh_list)) < 0: return -1
      for iter22 in self.nhr_nh_list:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeI32(iter22) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_label is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_label', TType.I32, 19, annotations) < 0: return -1
      if oprot.writeI32(self.nhr_label) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.nhr_label_list is not None:
      annotations = {}
      if oprot.writeFieldBegin('nhr_label_list', TType.LIST, 20, annotations) < 0: return -1
      if oprot.writeListBegin(TType.I32, len(self.nhr_label_list)) < 0: return -1
      for iter23 in self.nhr_label_list:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeI32(iter23) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.nhr_type != other.nhr_type:
      return False
    if self.nhr_family != other.nhr_family:
      return False
    if self.nhr_id != other.nhr_id:
      return False
    if self.nhr_rid != other.nhr_rid:
      return False
    if self.nhr_encap_oif_id != other.nhr_encap_oif_id:
      return False
    if self.nhr_encap_len != other.nhr_encap_len:
      return False
    if self.nhr_encap_family != other.nhr_encap_family:
      return False
    if self.nhr_vrf != other.nhr_vrf:
      return False
    if self.nhr_tun_sip != other.nhr_tun_sip:
      return False
    if self.nhr_tun_dip != other.nhr_tun_dip:
      return False
    if self.nhr_tun_sport != other.nhr_tun_sport:
      return False
    if self.nhr_tun_dport != other.nhr_tun_dport:
      return False
    if self.nhr_ref_cnt != other.nhr_ref_cnt:
      return False
    if self.nhr_marker != other.nhr_marker:
      return False
    if self.nhr_flags != other.nhr_flags:
      return False
    if self.nhr_encap != other.nhr_encap:
      return False
    if self.nhr_nh_list != other.nhr_nh_list:
      return False
    if self.nhr_label != other.nhr_label:
      return False
    if self.nhr_label_list != other.nhr_label_list:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_interface_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.U32, 'vifr_core', None, None, ), # 2
    (3, TType.I32, 'vifr_type', None, None, ), # 3
    (4, TType.I32, 'vifr_flags', None, None, ), # 4
    (5, TType.I32, 'vifr_vrf', None, None, ), # 5
    (6, TType.I32, 'vifr_idx', None, None, ), # 6
    (7, TType.I32, 'vifr_rid', None, None, ), # 7
    (8, TType.I32, 'vifr_os_idx', None, None, ), # 8
    (9, TType.I32, 'vifr_mtu', None, None, ), # 9
    (10, TType.STRING, 'vifr_name', None, None, ), # 10
    (11, TType.I64, 'vifr_ibytes', None, None, ), # 11
    (12, TType.I64, 'vifr_ipackets', None, None, ), # 12
    (13, TType.I64, 'vifr_ierrors', None, None, ), # 13
    (14, TType.I64, 'vifr_obytes', None, None, ), # 14
    (15, TType.I64, 'vifr_opackets', None, None, ), # 15
    (16, TType.I64, 'vifr_oerrors', None, None, ), # 16
    (17, TType.I64, 'vifr_ifenqpkts', None, None, ), # 17
    (18, TType.I64, 'vifr_ifenqdrops', None, None, ), # 18
    (19, TType.I64, 'vifr_ifdeqpkts', None, None, ), # 19
    (20, TType.I64, 'vifr_ifdeqdrops', None, None, ), # 20
    (21, TType.I64, 'vifr_iftxrngenqpkts', None, None, ), # 21
    (22, TType.I64, 'vifr_iftxrngenqdrops', None, None, ), # 22
    (23, TType.I64, 'vifr_ifrxrngenqpkts', None, None, ), # 23
    (24, TType.I64, 'vifr_ifrxrngenqdrops', None, None, ), # 24
    (25, TType.I32, 'vifr_ref_cnt', None, None, ), # 25
    (26, TType.I32, 'vifr_marker', None, None, ), # 26
    (27, TType.LIST, 'vifr_mac', (TType.BYTE,None), None, ), # 27
    (28, TType.I32, 'vifr_ip', None, None, ), # 28
    (29, TType.I32, 'vifr_context', None, None, ), # 29
    (30, TType.I16, 'vifr_mir_id', None, None, ), # 30
    (31, TType.I32, 'vifr_speed', None, None, ), # 31
    (32, TType.I32, 'vifr_duplex', None, None, ), # 32
    (33, TType.I16, 'vifr_vlan_id', None, None, ), # 33
    (34, TType.I32, 'vifr_parent_vif_idx', None, None, ), # 34
    (35, TType.I16, 'vifr_nh_id', None, None, ), # 35
    (36, TType.I32, 'vifr_cross_connect_idx', None, None, ), # 36
    (37, TType.LIST, 'vifr_src_mac', (TType.BYTE,None), None, ), # 37
    (38, TType.I32, 'vifr_bridge_idx', None, None, ), # 38
    (39, TType.I16, 'vifr_ovlan_id', None, None, ), # 39
    (40, TType.BYTE, 'vifr_transport', None, None, ), # 40
  )

  def __init__(self, h_op=None, vifr_core=None, vifr_type=None, vifr_flags=None, vifr_vrf=None, vifr_idx=None, vifr_rid=None, vifr_os_idx=None, vifr_mtu=None, vifr_name=None, vifr_ibytes=None, vifr_ipackets=None, vifr_ierrors=None, vifr_obytes=None, vifr_opackets=None, vifr_oerrors=None, vifr_ifenqpkts=None, vifr_ifenqdrops=None, vifr_ifdeqpkts=None, vifr_ifdeqdrops=None, vifr_iftxrngenqpkts=None, vifr_iftxrngenqdrops=None, vifr_ifrxrngenqpkts=None, vifr_ifrxrngenqdrops=None, vifr_ref_cnt=None, vifr_marker=None, vifr_mac=None, vifr_ip=None, vifr_context=None, vifr_mir_id=None, vifr_speed=None, vifr_duplex=None, vifr_vlan_id=None, vifr_parent_vif_idx=None, vifr_nh_id=None, vifr_cross_connect_idx=None, vifr_src_mac=None, vifr_bridge_idx=None, vifr_ovlan_id=None, vifr_transport=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.vifr_core = vifr_core
    self.vifr_type = vifr_type
    self.vifr_flags = vifr_flags
    self.vifr_vrf = vifr_vrf
    self.vifr_idx = vifr_idx
    self.vifr_rid = vifr_rid
    self.vifr_os_idx = vifr_os_idx
    self.vifr_mtu = vifr_mtu
    self.vifr_name = vifr_name
    self.vifr_ibytes = vifr_ibytes
    self.vifr_ipackets = vifr_ipackets
    self.vifr_ierrors = vifr_ierrors
    self.vifr_obytes = vifr_obytes
    self.vifr_opackets = vifr_opackets
    self.vifr_oerrors = vifr_oerrors
    self.vifr_ifenqpkts = vifr_ifenqpkts
    self.vifr_ifenqdrops = vifr_ifenqdrops
    self.vifr_ifdeqpkts = vifr_ifdeqpkts
    self.vifr_ifdeqdrops = vifr_ifdeqdrops
    self.vifr_iftxrngenqpkts = vifr_iftxrngenqpkts
    self.vifr_iftxrngenqdrops = vifr_iftxrngenqdrops
    self.vifr_ifrxrngenqpkts = vifr_ifrxrngenqpkts
    self.vifr_ifrxrngenqdrops = vifr_ifrxrngenqdrops
    self.vifr_ref_cnt = vifr_ref_cnt
    self.vifr_marker = vifr_marker
    self.vifr_mac = vifr_mac
    self.vifr_ip = vifr_ip
    self.vifr_context = vifr_context
    self.vifr_mir_id = vifr_mir_id
    self.vifr_speed = vifr_speed
    self.vifr_duplex = vifr_duplex
    self.vifr_vlan_id = vifr_vlan_id
    self.vifr_parent_vif_idx = vifr_parent_vif_idx
    self.vifr_nh_id = vifr_nh_id
    self.vifr_cross_connect_idx = vifr_cross_connect_idx
    self.vifr_src_mac = vifr_src_mac
    self.vifr_bridge_idx = vifr_bridge_idx
    self.vifr_ovlan_id = vifr_ovlan_id
    self.vifr_transport = vifr_transport
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 4225484690
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_interface_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.vifr_core is not None:
      log_str.write('vifr_core = ')
      log_str.write(str(self.vifr_core))
      log_str.write('  ')
    if self.vifr_type is not None:
      log_str.write('vifr_type = ')
      log_str.write(str(self.vifr_type))
      log_str.write('  ')
    if self.vifr_flags is not None:
      log_str.write('vifr_flags = ')
      log_str.write(str(self.vifr_flags))
      log_str.write('  ')
    if self.vifr_vrf is not None:
      log_str.write('vifr_vrf = ')
      log_str.write(str(self.vifr_vrf))
      log_str.write('  ')
    if self.vifr_idx is not None:
      log_str.write('vifr_idx = ')
      log_str.write(str(self.vifr_idx))
      log_str.write('  ')
    if self.vifr_rid is not None:
      log_str.write('vifr_rid = ')
      log_str.write(str(self.vifr_rid))
      log_str.write('  ')
    if self.vifr_os_idx is not None:
      log_str.write('vifr_os_idx = ')
      log_str.write(str(self.vifr_os_idx))
      log_str.write('  ')
    if self.vifr_mtu is not None:
      log_str.write('vifr_mtu = ')
      log_str.write(str(self.vifr_mtu))
      log_str.write('  ')
    if self.vifr_name is not None:
      log_str.write('vifr_name = ')
      log_str.write(self.vifr_name)
      log_str.write('  ')
    if self.vifr_ibytes is not None:
      log_str.write('vifr_ibytes = ')
      log_str.write(str(self.vifr_ibytes))
      log_str.write('  ')
    if self.vifr_ipackets is not None:
      log_str.write('vifr_ipackets = ')
      log_str.write(str(self.vifr_ipackets))
      log_str.write('  ')
    if self.vifr_ierrors is not None:
      log_str.write('vifr_ierrors = ')
      log_str.write(str(self.vifr_ierrors))
      log_str.write('  ')
    if self.vifr_obytes is not None:
      log_str.write('vifr_obytes = ')
      log_str.write(str(self.vifr_obytes))
      log_str.write('  ')
    if self.vifr_opackets is not None:
      log_str.write('vifr_opackets = ')
      log_str.write(str(self.vifr_opackets))
      log_str.write('  ')
    if self.vifr_oerrors is not None:
      log_str.write('vifr_oerrors = ')
      log_str.write(str(self.vifr_oerrors))
      log_str.write('  ')
    if self.vifr_ifenqpkts is not None:
      log_str.write('vifr_ifenqpkts = ')
      log_str.write(str(self.vifr_ifenqpkts))
      log_str.write('  ')
    if self.vifr_ifenqdrops is not None:
      log_str.write('vifr_ifenqdrops = ')
      log_str.write(str(self.vifr_ifenqdrops))
      log_str.write('  ')
    if self.vifr_ifdeqpkts is not None:
      log_str.write('vifr_ifdeqpkts = ')
      log_str.write(str(self.vifr_ifdeqpkts))
      log_str.write('  ')
    if self.vifr_ifdeqdrops is not None:
      log_str.write('vifr_ifdeqdrops = ')
      log_str.write(str(self.vifr_ifdeqdrops))
      log_str.write('  ')
    if self.vifr_iftxrngenqpkts is not None:
      log_str.write('vifr_iftxrngenqpkts = ')
      log_str.write(str(self.vifr_iftxrngenqpkts))
      log_str.write('  ')
    if self.vifr_iftxrngenqdrops is not None:
      log_str.write('vifr_iftxrngenqdrops = ')
      log_str.write(str(self.vifr_iftxrngenqdrops))
      log_str.write('  ')
    if self.vifr_ifrxrngenqpkts is not None:
      log_str.write('vifr_ifrxrngenqpkts = ')
      log_str.write(str(self.vifr_ifrxrngenqpkts))
      log_str.write('  ')
    if self.vifr_ifrxrngenqdrops is not None:
      log_str.write('vifr_ifrxrngenqdrops = ')
      log_str.write(str(self.vifr_ifrxrngenqdrops))
      log_str.write('  ')
    if self.vifr_ref_cnt is not None:
      log_str.write('vifr_ref_cnt = ')
      log_str.write(str(self.vifr_ref_cnt))
      log_str.write('  ')
    if self.vifr_marker is not None:
      log_str.write('vifr_marker = ')
      log_str.write(str(self.vifr_marker))
      log_str.write('  ')
    if self.vifr_mac is not None:
      log_str.write('vifr_mac = ')
      log_str.write('[ ')
      for iter24 in self.vifr_mac:
        log_str.write(hex(iter24))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.vifr_ip is not None:
      log_str.write('vifr_ip = ')
      log_str.write(str(self.vifr_ip))
      log_str.write('  ')
    if self.vifr_context is not None:
      log_str.write('vifr_context = ')
      log_str.write(str(self.vifr_context))
      log_str.write('  ')
    if self.vifr_mir_id is not None:
      log_str.write('vifr_mir_id = ')
      log_str.write(str(self.vifr_mir_id))
      log_str.write('  ')
    if self.vifr_speed is not None:
      log_str.write('vifr_speed = ')
      log_str.write(str(self.vifr_speed))
      log_str.write('  ')
    if self.vifr_duplex is not None:
      log_str.write('vifr_duplex = ')
      log_str.write(str(self.vifr_duplex))
      log_str.write('  ')
    if self.vifr_vlan_id is not None:
      log_str.write('vifr_vlan_id = ')
      log_str.write(str(self.vifr_vlan_id))
      log_str.write('  ')
    if self.vifr_parent_vif_idx is not None:
      log_str.write('vifr_parent_vif_idx = ')
      log_str.write(str(self.vifr_parent_vif_idx))
      log_str.write('  ')
    if self.vifr_nh_id is not None:
      log_str.write('vifr_nh_id = ')
      log_str.write(str(self.vifr_nh_id))
      log_str.write('  ')
    if self.vifr_cross_connect_idx is not None:
      log_str.write('vifr_cross_connect_idx = ')
      log_str.write(str(self.vifr_cross_connect_idx))
      log_str.write('  ')
    if self.vifr_src_mac is not None:
      log_str.write('vifr_src_mac = ')
      log_str.write('[ ')
      for iter25 in self.vifr_src_mac:
        log_str.write(hex(iter25))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.vifr_bridge_idx is not None:
      log_str.write('vifr_bridge_idx = ')
      log_str.write(str(self.vifr_bridge_idx))
      log_str.write('  ')
    if self.vifr_ovlan_id is not None:
      log_str.write('vifr_ovlan_id = ')
      log_str.write(str(self.vifr_ovlan_id))
      log_str.write('  ')
    if self.vifr_transport is not None:
      log_str.write('vifr_transport = ')
      log_str.write(hex(self.vifr_transport))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.U32:
          (length, self.vifr_core) = iprot.readU32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          (length, self.vifr_type) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          (length, self.vifr_flags) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          (length, self.vifr_vrf) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          (length, self.vifr_idx) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          (length, self.vifr_rid) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          (length, self.vifr_os_idx) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          (length, self.vifr_mtu) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          (length, self.vifr_name) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          (length, self.vifr_ibytes) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          (length, self.vifr_ipackets) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          (length, self.vifr_ierrors) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          (length, self.vifr_obytes) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          (length, self.vifr_opackets) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          (length, self.vifr_oerrors) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          (length, self.vifr_ifenqpkts) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          (length, self.vifr_ifenqdrops) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          (length, self.vifr_ifdeqpkts) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          (length, self.vifr_ifdeqdrops) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          (length, self.vifr_iftxrngenqpkts) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          (length, self.vifr_iftxrngenqdrops) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          (length, self.vifr_ifrxrngenqpkts) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          (length, self.vifr_ifrxrngenqdrops) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          (length, self.vifr_ref_cnt) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          (length, self.vifr_marker) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.LIST:
          self.vifr_mac = []
          (length, _etype29, _size26) = iprot.readListBegin()
          read_cnt += length
          for _i30 in xrange(_size26):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem31) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.vifr_mac.append(_elem31)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          (length, self.vifr_ip) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          (length, self.vifr_context) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I16:
          (length, self.vifr_mir_id) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          (length, self.vifr_speed) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          (length, self.vifr_duplex) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I16:
          (length, self.vifr_vlan_id) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          (length, self.vifr_parent_vif_idx) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I16:
          (length, self.vifr_nh_id) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          (length, self.vifr_cross_connect_idx) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.LIST:
          self.vifr_src_mac = []
          (length, _etype35, _size32) = iprot.readListBegin()
          read_cnt += length
          for _i36 in xrange(_size32):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem37) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.vifr_src_mac.append(_elem37)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          (length, self.vifr_bridge_idx) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I16:
          (length, self.vifr_ovlan_id) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.BYTE:
          (length, self.vifr_transport) = iprot.readByte();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_interface_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_core is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_core', TType.U32, 2, annotations) < 0: return -1
      if oprot.writeU32(self.vifr_core) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_type is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_type', TType.I32, 3, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_type) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_flags is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_flags', TType.I32, 4, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_flags) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_vrf is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_vrf', TType.I32, 5, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_vrf) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_idx is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_idx', TType.I32, 6, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_idx) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_rid', TType.I32, 7, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_os_idx is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_os_idx', TType.I32, 8, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_os_idx) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_mtu is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_mtu', TType.I32, 9, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_mtu) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_name is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_name', TType.STRING, 10, annotations) < 0: return -1
      if oprot.writeString(self.vifr_name) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ibytes is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ibytes', TType.I64, 11, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ibytes) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ipackets is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ipackets', TType.I64, 12, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ipackets) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ierrors is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ierrors', TType.I64, 13, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ierrors) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_obytes is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_obytes', TType.I64, 14, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_obytes) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_opackets is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_opackets', TType.I64, 15, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_opackets) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_oerrors is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_oerrors', TType.I64, 16, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_oerrors) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ifenqpkts is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ifenqpkts', TType.I64, 17, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ifenqpkts) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ifenqdrops is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ifenqdrops', TType.I64, 18, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ifenqdrops) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ifdeqpkts is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ifdeqpkts', TType.I64, 19, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ifdeqpkts) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ifdeqdrops is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ifdeqdrops', TType.I64, 20, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ifdeqdrops) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_iftxrngenqpkts is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_iftxrngenqpkts', TType.I64, 21, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_iftxrngenqpkts) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_iftxrngenqdrops is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_iftxrngenqdrops', TType.I64, 22, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_iftxrngenqdrops) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ifrxrngenqpkts is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ifrxrngenqpkts', TType.I64, 23, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ifrxrngenqpkts) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ifrxrngenqdrops is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ifrxrngenqdrops', TType.I64, 24, annotations) < 0: return -1
      if oprot.writeI64(self.vifr_ifrxrngenqdrops) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ref_cnt is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ref_cnt', TType.I32, 25, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_ref_cnt) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_marker is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_marker', TType.I32, 26, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_marker) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_mac is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_mac', TType.LIST, 27, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.vifr_mac)) < 0: return -1
      for iter38 in self.vifr_mac:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter38) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ip', TType.I32, 28, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_ip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_context is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_context', TType.I32, 29, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_context) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_mir_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_mir_id', TType.I16, 30, annotations) < 0: return -1
      if oprot.writeI16(self.vifr_mir_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_speed is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_speed', TType.I32, 31, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_speed) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_duplex is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_duplex', TType.I32, 32, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_duplex) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_vlan_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_vlan_id', TType.I16, 33, annotations) < 0: return -1
      if oprot.writeI16(self.vifr_vlan_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_parent_vif_idx is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_parent_vif_idx', TType.I32, 34, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_parent_vif_idx) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_nh_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_nh_id', TType.I16, 35, annotations) < 0: return -1
      if oprot.writeI16(self.vifr_nh_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_cross_connect_idx is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_cross_connect_idx', TType.I32, 36, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_cross_connect_idx) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_src_mac is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_src_mac', TType.LIST, 37, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.vifr_src_mac)) < 0: return -1
      for iter39 in self.vifr_src_mac:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter39) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_bridge_idx is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_bridge_idx', TType.I32, 38, annotations) < 0: return -1
      if oprot.writeI32(self.vifr_bridge_idx) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_ovlan_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_ovlan_id', TType.I16, 39, annotations) < 0: return -1
      if oprot.writeI16(self.vifr_ovlan_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vifr_transport is not None:
      annotations = {}
      if oprot.writeFieldBegin('vifr_transport', TType.BYTE, 40, annotations) < 0: return -1
      if oprot.writeByte(self.vifr_transport) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.vifr_core != other.vifr_core:
      return False
    if self.vifr_type != other.vifr_type:
      return False
    if self.vifr_flags != other.vifr_flags:
      return False
    if self.vifr_vrf != other.vifr_vrf:
      return False
    if self.vifr_idx != other.vifr_idx:
      return False
    if self.vifr_rid != other.vifr_rid:
      return False
    if self.vifr_os_idx != other.vifr_os_idx:
      return False
    if self.vifr_mtu != other.vifr_mtu:
      return False
    if self.vifr_name != other.vifr_name:
      return False
    if self.vifr_ibytes != other.vifr_ibytes:
      return False
    if self.vifr_ipackets != other.vifr_ipackets:
      return False
    if self.vifr_ierrors != other.vifr_ierrors:
      return False
    if self.vifr_obytes != other.vifr_obytes:
      return False
    if self.vifr_opackets != other.vifr_opackets:
      return False
    if self.vifr_oerrors != other.vifr_oerrors:
      return False
    if self.vifr_ifenqpkts != other.vifr_ifenqpkts:
      return False
    if self.vifr_ifenqdrops != other.vifr_ifenqdrops:
      return False
    if self.vifr_ifdeqpkts != other.vifr_ifdeqpkts:
      return False
    if self.vifr_ifdeqdrops != other.vifr_ifdeqdrops:
      return False
    if self.vifr_iftxrngenqpkts != other.vifr_iftxrngenqpkts:
      return False
    if self.vifr_iftxrngenqdrops != other.vifr_iftxrngenqdrops:
      return False
    if self.vifr_ifrxrngenqpkts != other.vifr_ifrxrngenqpkts:
      return False
    if self.vifr_ifrxrngenqdrops != other.vifr_ifrxrngenqdrops:
      return False
    if self.vifr_ref_cnt != other.vifr_ref_cnt:
      return False
    if self.vifr_marker != other.vifr_marker:
      return False
    if self.vifr_mac != other.vifr_mac:
      return False
    if self.vifr_ip != other.vifr_ip:
      return False
    if self.vifr_context != other.vifr_context:
      return False
    if self.vifr_mir_id != other.vifr_mir_id:
      return False
    if self.vifr_speed != other.vifr_speed:
      return False
    if self.vifr_duplex != other.vifr_duplex:
      return False
    if self.vifr_vlan_id != other.vifr_vlan_id:
      return False
    if self.vifr_parent_vif_idx != other.vifr_parent_vif_idx:
      return False
    if self.vifr_nh_id != other.vifr_nh_id:
      return False
    if self.vifr_cross_connect_idx != other.vifr_cross_connect_idx:
      return False
    if self.vifr_src_mac != other.vifr_src_mac:
      return False
    if self.vifr_bridge_idx != other.vifr_bridge_idx:
      return False
    if self.vifr_ovlan_id != other.vifr_ovlan_id:
      return False
    if self.vifr_transport != other.vifr_transport:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_vxlan_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I16, 'vxlanr_rid', None, None, ), # 2
    (3, TType.I32, 'vxlanr_vnid', None, None, ), # 3
    (4, TType.I32, 'vxlanr_nhid', None, None, ), # 4
  )

  def __init__(self, h_op=None, vxlanr_rid=None, vxlanr_vnid=None, vxlanr_nhid=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.vxlanr_rid = vxlanr_rid
    self.vxlanr_vnid = vxlanr_vnid
    self.vxlanr_nhid = vxlanr_nhid
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3228644153
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_vxlan_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.vxlanr_rid is not None:
      log_str.write('vxlanr_rid = ')
      log_str.write(str(self.vxlanr_rid))
      log_str.write('  ')
    if self.vxlanr_vnid is not None:
      log_str.write('vxlanr_vnid = ')
      log_str.write(str(self.vxlanr_vnid))
      log_str.write('  ')
    if self.vxlanr_nhid is not None:
      log_str.write('vxlanr_nhid = ')
      log_str.write(str(self.vxlanr_nhid))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          (length, self.vxlanr_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          (length, self.vxlanr_vnid) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          (length, self.vxlanr_nhid) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_vxlan_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vxlanr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vxlanr_rid', TType.I16, 2, annotations) < 0: return -1
      if oprot.writeI16(self.vxlanr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vxlanr_vnid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vxlanr_vnid', TType.I32, 3, annotations) < 0: return -1
      if oprot.writeI32(self.vxlanr_vnid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vxlanr_nhid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vxlanr_nhid', TType.I32, 4, annotations) < 0: return -1
      if oprot.writeI32(self.vxlanr_nhid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.vxlanr_rid != other.vxlanr_rid:
      return False
    if self.vxlanr_vnid != other.vxlanr_vnid:
      return False
    if self.vxlanr_nhid != other.vxlanr_nhid:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_route_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I32, 'rtr_vrf_id', None, None, ), # 2
    (3, TType.I32, 'rtr_family', None, None, ), # 3
    (4, TType.LIST, 'rtr_prefix', (TType.BYTE,None), None, ), # 4
    (5, TType.I32, 'rtr_prefix_len', None, None, ), # 5
    (6, TType.I16, 'rtr_rid', None, None, ), # 6
    (7, TType.I16, 'rtr_label_flags', None, None, ), # 7
    (8, TType.I32, 'rtr_label', None, None, ), # 8
    (9, TType.I32, 'rtr_nh_id', None, None, ), # 9
    (10, TType.LIST, 'rtr_marker', (TType.BYTE,None), None, ), # 10
    (11, TType.I32, 'rtr_marker_plen', None, None, ), # 11
    (12, TType.LIST, 'rtr_mac', (TType.BYTE,None), None, ), # 12
    (13, TType.I32, 'rtr_replace_plen', None, None, ), # 13
    (14, TType.I32, 'rtr_index', None, None, ), # 14
  )

  def __init__(self, h_op=None, rtr_vrf_id=None, rtr_family=None, rtr_prefix=None, rtr_prefix_len=None, rtr_rid=None, rtr_label_flags=None, rtr_label=None, rtr_nh_id=None, rtr_marker=None, rtr_marker_plen=None, rtr_mac=None, rtr_replace_plen=None, rtr_index=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.rtr_vrf_id = rtr_vrf_id
    self.rtr_family = rtr_family
    self.rtr_prefix = rtr_prefix
    self.rtr_prefix_len = rtr_prefix_len
    self.rtr_rid = rtr_rid
    self.rtr_label_flags = rtr_label_flags
    self.rtr_label = rtr_label
    self.rtr_nh_id = rtr_nh_id
    self.rtr_marker = rtr_marker
    self.rtr_marker_plen = rtr_marker_plen
    self.rtr_mac = rtr_mac
    self.rtr_replace_plen = rtr_replace_plen
    self.rtr_index = rtr_index
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 750425886
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_route_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.rtr_vrf_id is not None:
      log_str.write('rtr_vrf_id = ')
      log_str.write(str(self.rtr_vrf_id))
      log_str.write('  ')
    if self.rtr_family is not None:
      log_str.write('rtr_family = ')
      log_str.write(str(self.rtr_family))
      log_str.write('  ')
    if self.rtr_prefix is not None:
      log_str.write('rtr_prefix = ')
      log_str.write('[ ')
      for iter40 in self.rtr_prefix:
        log_str.write(hex(iter40))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.rtr_prefix_len is not None:
      log_str.write('rtr_prefix_len = ')
      log_str.write(str(self.rtr_prefix_len))
      log_str.write('  ')
    if self.rtr_rid is not None:
      log_str.write('rtr_rid = ')
      log_str.write(str(self.rtr_rid))
      log_str.write('  ')
    if self.rtr_label_flags is not None:
      log_str.write('rtr_label_flags = ')
      log_str.write(str(self.rtr_label_flags))
      log_str.write('  ')
    if self.rtr_label is not None:
      log_str.write('rtr_label = ')
      log_str.write(str(self.rtr_label))
      log_str.write('  ')
    if self.rtr_nh_id is not None:
      log_str.write('rtr_nh_id = ')
      log_str.write(str(self.rtr_nh_id))
      log_str.write('  ')
    if self.rtr_marker is not None:
      log_str.write('rtr_marker = ')
      log_str.write('[ ')
      for iter41 in self.rtr_marker:
        log_str.write(hex(iter41))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.rtr_marker_plen is not None:
      log_str.write('rtr_marker_plen = ')
      log_str.write(str(self.rtr_marker_plen))
      log_str.write('  ')
    if self.rtr_mac is not None:
      log_str.write('rtr_mac = ')
      log_str.write('[ ')
      for iter42 in self.rtr_mac:
        log_str.write(hex(iter42))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.rtr_replace_plen is not None:
      log_str.write('rtr_replace_plen = ')
      log_str.write(str(self.rtr_replace_plen))
      log_str.write('  ')
    if self.rtr_index is not None:
      log_str.write('rtr_index = ')
      log_str.write(str(self.rtr_index))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          (length, self.rtr_vrf_id) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          (length, self.rtr_family) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.rtr_prefix = []
          (length, _etype46, _size43) = iprot.readListBegin()
          read_cnt += length
          for _i47 in xrange(_size43):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem48) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.rtr_prefix.append(_elem48)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          (length, self.rtr_prefix_len) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          (length, self.rtr_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          (length, self.rtr_label_flags) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          (length, self.rtr_label) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          (length, self.rtr_nh_id) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.rtr_marker = []
          (length, _etype52, _size49) = iprot.readListBegin()
          read_cnt += length
          for _i53 in xrange(_size49):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem54) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.rtr_marker.append(_elem54)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          (length, self.rtr_marker_plen) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.rtr_mac = []
          (length, _etype58, _size55) = iprot.readListBegin()
          read_cnt += length
          for _i59 in xrange(_size55):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem60) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.rtr_mac.append(_elem60)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          (length, self.rtr_replace_plen) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          (length, self.rtr_index) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_route_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_vrf_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_vrf_id', TType.I32, 2, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_vrf_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_family is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_family', TType.I32, 3, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_family) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_prefix is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_prefix', TType.LIST, 4, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.rtr_prefix)) < 0: return -1
      for iter61 in self.rtr_prefix:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter61) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_prefix_len is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_prefix_len', TType.I32, 5, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_prefix_len) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_rid', TType.I16, 6, annotations) < 0: return -1
      if oprot.writeI16(self.rtr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_label_flags is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_label_flags', TType.I16, 7, annotations) < 0: return -1
      if oprot.writeI16(self.rtr_label_flags) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_label is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_label', TType.I32, 8, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_label) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_nh_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_nh_id', TType.I32, 9, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_nh_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_marker is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_marker', TType.LIST, 10, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.rtr_marker)) < 0: return -1
      for iter62 in self.rtr_marker:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter62) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_marker_plen is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_marker_plen', TType.I32, 11, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_marker_plen) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_mac is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_mac', TType.LIST, 12, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.rtr_mac)) < 0: return -1
      for iter63 in self.rtr_mac:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter63) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_replace_plen is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_replace_plen', TType.I32, 13, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_replace_plen) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.rtr_index is not None:
      annotations = {}
      if oprot.writeFieldBegin('rtr_index', TType.I32, 14, annotations) < 0: return -1
      if oprot.writeI32(self.rtr_index) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.rtr_vrf_id != other.rtr_vrf_id:
      return False
    if self.rtr_family != other.rtr_family:
      return False
    if self.rtr_prefix != other.rtr_prefix:
      return False
    if self.rtr_prefix_len != other.rtr_prefix_len:
      return False
    if self.rtr_rid != other.rtr_rid:
      return False
    if self.rtr_label_flags != other.rtr_label_flags:
      return False
    if self.rtr_label != other.rtr_label:
      return False
    if self.rtr_nh_id != other.rtr_nh_id:
      return False
    if self.rtr_marker != other.rtr_marker:
      return False
    if self.rtr_marker_plen != other.rtr_marker_plen:
      return False
    if self.rtr_mac != other.rtr_mac:
      return False
    if self.rtr_replace_plen != other.rtr_replace_plen:
      return False
    if self.rtr_index != other.rtr_index:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_mpls_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I32, 'mr_label', None, None, ), # 2
    (3, TType.I16, 'mr_rid', None, None, ), # 3
    (4, TType.I32, 'mr_nhid', None, None, ), # 4
    (5, TType.I32, 'mr_marker', None, None, ), # 5
  )

  def __init__(self, h_op=None, mr_label=None, mr_rid=None, mr_nhid=None, mr_marker=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.mr_label = mr_label
    self.mr_rid = mr_rid
    self.mr_nhid = mr_nhid
    self.mr_marker = mr_marker
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3699280390
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_mpls_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.mr_label is not None:
      log_str.write('mr_label = ')
      log_str.write(str(self.mr_label))
      log_str.write('  ')
    if self.mr_rid is not None:
      log_str.write('mr_rid = ')
      log_str.write(str(self.mr_rid))
      log_str.write('  ')
    if self.mr_nhid is not None:
      log_str.write('mr_nhid = ')
      log_str.write(str(self.mr_nhid))
      log_str.write('  ')
    if self.mr_marker is not None:
      log_str.write('mr_marker = ')
      log_str.write(str(self.mr_marker))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          (length, self.mr_label) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          (length, self.mr_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          (length, self.mr_nhid) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          (length, self.mr_marker) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_mpls_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mr_label is not None:
      annotations = {}
      if oprot.writeFieldBegin('mr_label', TType.I32, 2, annotations) < 0: return -1
      if oprot.writeI32(self.mr_label) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('mr_rid', TType.I16, 3, annotations) < 0: return -1
      if oprot.writeI16(self.mr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mr_nhid is not None:
      annotations = {}
      if oprot.writeFieldBegin('mr_nhid', TType.I32, 4, annotations) < 0: return -1
      if oprot.writeI32(self.mr_nhid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mr_marker is not None:
      annotations = {}
      if oprot.writeFieldBegin('mr_marker', TType.I32, 5, annotations) < 0: return -1
      if oprot.writeI32(self.mr_marker) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.mr_label != other.mr_label:
      return False
    if self.mr_rid != other.mr_rid:
      return False
    if self.mr_nhid != other.mr_nhid:
      return False
    if self.mr_marker != other.mr_marker:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_mirror_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I16, 'mirr_index', None, None, ), # 2
    (3, TType.I16, 'mirr_rid', None, None, ), # 3
    (4, TType.I32, 'mirr_nhid', None, None, ), # 4
    (5, TType.I32, 'mirr_users', None, None, ), # 5
    (6, TType.I32, 'mirr_flags', None, None, ), # 6
    (7, TType.I32, 'mirr_marker', None, None, ), # 7
  )

  def __init__(self, h_op=None, mirr_index=None, mirr_rid=None, mirr_nhid=None, mirr_users=None, mirr_flags=None, mirr_marker=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.mirr_index = mirr_index
    self.mirr_rid = mirr_rid
    self.mirr_nhid = mirr_nhid
    self.mirr_users = mirr_users
    self.mirr_flags = mirr_flags
    self.mirr_marker = mirr_marker
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 934117896
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_mirror_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.mirr_index is not None:
      log_str.write('mirr_index = ')
      log_str.write(str(self.mirr_index))
      log_str.write('  ')
    if self.mirr_rid is not None:
      log_str.write('mirr_rid = ')
      log_str.write(str(self.mirr_rid))
      log_str.write('  ')
    if self.mirr_nhid is not None:
      log_str.write('mirr_nhid = ')
      log_str.write(str(self.mirr_nhid))
      log_str.write('  ')
    if self.mirr_users is not None:
      log_str.write('mirr_users = ')
      log_str.write(str(self.mirr_users))
      log_str.write('  ')
    if self.mirr_flags is not None:
      log_str.write('mirr_flags = ')
      log_str.write(str(self.mirr_flags))
      log_str.write('  ')
    if self.mirr_marker is not None:
      log_str.write('mirr_marker = ')
      log_str.write(str(self.mirr_marker))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          (length, self.mirr_index) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          (length, self.mirr_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          (length, self.mirr_nhid) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          (length, self.mirr_users) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          (length, self.mirr_flags) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          (length, self.mirr_marker) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_mirror_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mirr_index is not None:
      annotations = {}
      if oprot.writeFieldBegin('mirr_index', TType.I16, 2, annotations) < 0: return -1
      if oprot.writeI16(self.mirr_index) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mirr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('mirr_rid', TType.I16, 3, annotations) < 0: return -1
      if oprot.writeI16(self.mirr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mirr_nhid is not None:
      annotations = {}
      if oprot.writeFieldBegin('mirr_nhid', TType.I32, 4, annotations) < 0: return -1
      if oprot.writeI32(self.mirr_nhid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mirr_users is not None:
      annotations = {}
      if oprot.writeFieldBegin('mirr_users', TType.I32, 5, annotations) < 0: return -1
      if oprot.writeI32(self.mirr_users) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mirr_flags is not None:
      annotations = {}
      if oprot.writeFieldBegin('mirr_flags', TType.I32, 6, annotations) < 0: return -1
      if oprot.writeI32(self.mirr_flags) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.mirr_marker is not None:
      annotations = {}
      if oprot.writeFieldBegin('mirr_marker', TType.I32, 7, annotations) < 0: return -1
      if oprot.writeI32(self.mirr_marker) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.mirr_index != other.mirr_index:
      return False
    if self.mirr_rid != other.mirr_rid:
      return False
    if self.mirr_nhid != other.mirr_nhid:
      return False
    if self.mirr_users != other.mirr_users:
      return False
    if self.mirr_flags != other.mirr_flags:
      return False
    if self.mirr_marker != other.mirr_marker:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_flow_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'fr_op', None, None, ), # 1
    (2, TType.I16, 'fr_rid', None, None, ), # 2
    (3, TType.I32, 'fr_index', None, None, ), # 3
    (4, TType.I16, 'fr_action', None, None, ), # 4
    (5, TType.I16, 'fr_flags', None, None, ), # 5
    (6, TType.I32, 'fr_ftable_size', None, None, ), # 6
    (7, TType.I16, 'fr_ftable_dev', None, None, ), # 7
    (8, TType.I32, 'fr_rindex', None, None, ), # 8
    (9, TType.I32, 'fr_family', None, None, ), # 9
    (10, TType.LIST, 'fr_flow_ip', (TType.BYTE,None), None, ), # 10
    (11, TType.I16, 'fr_flow_sport', None, None, ), # 11
    (12, TType.I16, 'fr_flow_dport', None, None, ), # 12
    (13, TType.BYTE, 'fr_flow_proto', None, None, ), # 13
    (14, TType.I16, 'fr_flow_vrf', None, None, ), # 14
    (15, TType.I16, 'fr_flow_dvrf', None, None, ), # 15
    (16, TType.I16, 'fr_mir_id', None, None, ), # 16
    (17, TType.I16, 'fr_sec_mir_id', None, None, ), # 17
    (18, TType.I32, 'fr_mir_sip', None, None, ), # 18
    (19, TType.I16, 'fr_mir_sport', None, None, ), # 19
    (20, TType.LIST, 'fr_pcap_meta_data', (TType.BYTE,None), None, ), # 20
    (21, TType.I16, 'fr_mir_vrf', None, None, ), # 21
    (22, TType.I32, 'fr_ecmp_nh_index', None, None, ), # 22
    (23, TType.I32, 'fr_src_nh_index', None, None, ), # 23
    (24, TType.I32, 'fr_flow_nh_id', None, None, ), # 24
    (25, TType.I16, 'fr_drop_reason', None, None, ), # 25
    (26, TType.STRING, 'fr_file_path', None, None, ), # 26
    (27, TType.I64, 'fr_processed', None, None, ), # 27
    (28, TType.I64, 'fr_created', None, None, ), # 28
    (29, TType.I64, 'fr_added', None, None, ), # 29
    (30, TType.I32, 'fr_cpus', None, None, ), # 30
    (31, TType.I32, 'fr_hold_oflows', None, None, ), # 31
    (32, TType.LIST, 'fr_hold_stat', (TType.I32,None), None, ), # 32
  )

  def __init__(self, fr_op=None, fr_rid=None, fr_index=None, fr_action=None, fr_flags=None, fr_ftable_size=None, fr_ftable_dev=None, fr_rindex=None, fr_family=None, fr_flow_ip=None, fr_flow_sport=None, fr_flow_dport=None, fr_flow_proto=None, fr_flow_vrf=None, fr_flow_dvrf=None, fr_mir_id=None, fr_sec_mir_id=None, fr_mir_sip=None, fr_mir_sport=None, fr_pcap_meta_data=None, fr_mir_vrf=None, fr_ecmp_nh_index=None, fr_src_nh_index=None, fr_flow_nh_id=None, fr_drop_reason=None, fr_file_path=None, fr_processed=None, fr_created=None, fr_added=None, fr_cpus=None, fr_hold_oflows=None, fr_hold_stat=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.fr_op = fr_op
    self.fr_rid = fr_rid
    self.fr_index = fr_index
    self.fr_action = fr_action
    self.fr_flags = fr_flags
    self.fr_ftable_size = fr_ftable_size
    self.fr_ftable_dev = fr_ftable_dev
    self.fr_rindex = fr_rindex
    self.fr_family = fr_family
    self.fr_flow_ip = fr_flow_ip
    self.fr_flow_sport = fr_flow_sport
    self.fr_flow_dport = fr_flow_dport
    self.fr_flow_proto = fr_flow_proto
    self.fr_flow_vrf = fr_flow_vrf
    self.fr_flow_dvrf = fr_flow_dvrf
    self.fr_mir_id = fr_mir_id
    self.fr_sec_mir_id = fr_sec_mir_id
    self.fr_mir_sip = fr_mir_sip
    self.fr_mir_sport = fr_mir_sport
    self.fr_pcap_meta_data = fr_pcap_meta_data
    self.fr_mir_vrf = fr_mir_vrf
    self.fr_ecmp_nh_index = fr_ecmp_nh_index
    self.fr_src_nh_index = fr_src_nh_index
    self.fr_flow_nh_id = fr_flow_nh_id
    self.fr_drop_reason = fr_drop_reason
    self.fr_file_path = fr_file_path
    self.fr_processed = fr_processed
    self.fr_created = fr_created
    self.fr_added = fr_added
    self.fr_cpus = fr_cpus
    self.fr_hold_oflows = fr_hold_oflows
    self.fr_hold_stat = fr_hold_stat
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2792649076
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_flow_req: ')                                                                                                                                                                         
    if self.fr_op is not None:
      log_str.write('fr_op = ')
      log_str.write(str(self.fr_op))
      log_str.write('  ')
    if self.fr_rid is not None:
      log_str.write('fr_rid = ')
      log_str.write(str(self.fr_rid))
      log_str.write('  ')
    if self.fr_index is not None:
      log_str.write('fr_index = ')
      log_str.write(str(self.fr_index))
      log_str.write('  ')
    if self.fr_action is not None:
      log_str.write('fr_action = ')
      log_str.write(str(self.fr_action))
      log_str.write('  ')
    if self.fr_flags is not None:
      log_str.write('fr_flags = ')
      log_str.write(str(self.fr_flags))
      log_str.write('  ')
    if self.fr_ftable_size is not None:
      log_str.write('fr_ftable_size = ')
      log_str.write(str(self.fr_ftable_size))
      log_str.write('  ')
    if self.fr_ftable_dev is not None:
      log_str.write('fr_ftable_dev = ')
      log_str.write(str(self.fr_ftable_dev))
      log_str.write('  ')
    if self.fr_rindex is not None:
      log_str.write('fr_rindex = ')
      log_str.write(str(self.fr_rindex))
      log_str.write('  ')
    if self.fr_family is not None:
      log_str.write('fr_family = ')
      log_str.write(str(self.fr_family))
      log_str.write('  ')
    if self.fr_flow_ip is not None:
      log_str.write('fr_flow_ip = ')
      log_str.write('[ ')
      for iter64 in self.fr_flow_ip:
        log_str.write(hex(iter64))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.fr_flow_sport is not None:
      log_str.write('fr_flow_sport = ')
      log_str.write(str(self.fr_flow_sport))
      log_str.write('  ')
    if self.fr_flow_dport is not None:
      log_str.write('fr_flow_dport = ')
      log_str.write(str(self.fr_flow_dport))
      log_str.write('  ')
    if self.fr_flow_proto is not None:
      log_str.write('fr_flow_proto = ')
      log_str.write(hex(self.fr_flow_proto))
      log_str.write('  ')
    if self.fr_flow_vrf is not None:
      log_str.write('fr_flow_vrf = ')
      log_str.write(str(self.fr_flow_vrf))
      log_str.write('  ')
    if self.fr_flow_dvrf is not None:
      log_str.write('fr_flow_dvrf = ')
      log_str.write(str(self.fr_flow_dvrf))
      log_str.write('  ')
    if self.fr_mir_id is not None:
      log_str.write('fr_mir_id = ')
      log_str.write(str(self.fr_mir_id))
      log_str.write('  ')
    if self.fr_sec_mir_id is not None:
      log_str.write('fr_sec_mir_id = ')
      log_str.write(str(self.fr_sec_mir_id))
      log_str.write('  ')
    if self.fr_mir_sip is not None:
      log_str.write('fr_mir_sip = ')
      log_str.write(str(self.fr_mir_sip))
      log_str.write('  ')
    if self.fr_mir_sport is not None:
      log_str.write('fr_mir_sport = ')
      log_str.write(str(self.fr_mir_sport))
      log_str.write('  ')
    if self.fr_pcap_meta_data is not None:
      log_str.write('fr_pcap_meta_data = ')
      log_str.write('[ ')
      for iter65 in self.fr_pcap_meta_data:
        log_str.write(hex(iter65))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    if self.fr_mir_vrf is not None:
      log_str.write('fr_mir_vrf = ')
      log_str.write(str(self.fr_mir_vrf))
      log_str.write('  ')
    if self.fr_ecmp_nh_index is not None:
      log_str.write('fr_ecmp_nh_index = ')
      log_str.write(str(self.fr_ecmp_nh_index))
      log_str.write('  ')
    if self.fr_src_nh_index is not None:
      log_str.write('fr_src_nh_index = ')
      log_str.write(str(self.fr_src_nh_index))
      log_str.write('  ')
    if self.fr_flow_nh_id is not None:
      log_str.write('fr_flow_nh_id = ')
      log_str.write(str(self.fr_flow_nh_id))
      log_str.write('  ')
    if self.fr_drop_reason is not None:
      log_str.write('fr_drop_reason = ')
      log_str.write(str(self.fr_drop_reason))
      log_str.write('  ')
    if self.fr_file_path is not None:
      log_str.write('fr_file_path = ')
      log_str.write(self.fr_file_path)
      log_str.write('  ')
    if self.fr_processed is not None:
      log_str.write('fr_processed = ')
      log_str.write(str(self.fr_processed))
      log_str.write('  ')
    if self.fr_created is not None:
      log_str.write('fr_created = ')
      log_str.write(str(self.fr_created))
      log_str.write('  ')
    if self.fr_added is not None:
      log_str.write('fr_added = ')
      log_str.write(str(self.fr_added))
      log_str.write('  ')
    if self.fr_cpus is not None:
      log_str.write('fr_cpus = ')
      log_str.write(str(self.fr_cpus))
      log_str.write('  ')
    if self.fr_hold_oflows is not None:
      log_str.write('fr_hold_oflows = ')
      log_str.write(str(self.fr_hold_oflows))
      log_str.write('  ')
    if self.fr_hold_stat is not None:
      log_str.write('fr_hold_stat = ')
      log_str.write('[ ')
      for iter66 in self.fr_hold_stat:
        log_str.write(str(iter66))
        log_str.write(', ')
      log_str.write(' ]')
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.fr_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          (length, self.fr_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          (length, self.fr_index) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          (length, self.fr_action) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          (length, self.fr_flags) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          (length, self.fr_ftable_size) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          (length, self.fr_ftable_dev) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          (length, self.fr_rindex) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          (length, self.fr_family) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.fr_flow_ip = []
          (length, _etype70, _size67) = iprot.readListBegin()
          read_cnt += length
          for _i71 in xrange(_size67):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem72) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.fr_flow_ip.append(_elem72)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          (length, self.fr_flow_sport) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I16:
          (length, self.fr_flow_dport) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.BYTE:
          (length, self.fr_flow_proto) = iprot.readByte();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I16:
          (length, self.fr_flow_vrf) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I16:
          (length, self.fr_flow_dvrf) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I16:
          (length, self.fr_mir_id) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I16:
          (length, self.fr_sec_mir_id) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          (length, self.fr_mir_sip) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I16:
          (length, self.fr_mir_sport) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.fr_pcap_meta_data = []
          (length, _etype76, _size73) = iprot.readListBegin()
          read_cnt += length
          for _i77 in xrange(_size73):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem78) = iprot.readByte();
            if length < 0: return -1
            read_cnt += length
            self.fr_pcap_meta_data.append(_elem78)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I16:
          (length, self.fr_mir_vrf) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          (length, self.fr_ecmp_nh_index) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          (length, self.fr_src_nh_index) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          (length, self.fr_flow_nh_id) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I16:
          (length, self.fr_drop_reason) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          (length, self.fr_file_path) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I64:
          (length, self.fr_processed) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I64:
          (length, self.fr_created) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          (length, self.fr_added) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          (length, self.fr_cpus) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          (length, self.fr_hold_oflows) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.LIST:
          self.fr_hold_stat = []
          (length, _etype82, _size79) = iprot.readListBegin()
          read_cnt += length
          for _i83 in xrange(_size79):
            read_cnt += iprot.readContainerElementBegin()
            (length, _elem84) = iprot.readI32();
            if length < 0: return -1
            read_cnt += length
            self.fr_hold_stat.append(_elem84)
            read_cnt += iprot.readContainerElementEnd()
          read_cnt += iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_flow_req') < 0: return -1
    if self.fr_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.fr_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_rid', TType.I16, 2, annotations) < 0: return -1
      if oprot.writeI16(self.fr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_index is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_index', TType.I32, 3, annotations) < 0: return -1
      if oprot.writeI32(self.fr_index) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_action is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_action', TType.I16, 4, annotations) < 0: return -1
      if oprot.writeI16(self.fr_action) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flags is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flags', TType.I16, 5, annotations) < 0: return -1
      if oprot.writeI16(self.fr_flags) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_ftable_size is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_ftable_size', TType.I32, 6, annotations) < 0: return -1
      if oprot.writeI32(self.fr_ftable_size) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_ftable_dev is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_ftable_dev', TType.I16, 7, annotations) < 0: return -1
      if oprot.writeI16(self.fr_ftable_dev) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_rindex is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_rindex', TType.I32, 8, annotations) < 0: return -1
      if oprot.writeI32(self.fr_rindex) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_family is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_family', TType.I32, 9, annotations) < 0: return -1
      if oprot.writeI32(self.fr_family) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flow_ip is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flow_ip', TType.LIST, 10, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.fr_flow_ip)) < 0: return -1
      for iter85 in self.fr_flow_ip:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter85) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flow_sport is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flow_sport', TType.I16, 11, annotations) < 0: return -1
      if oprot.writeI16(self.fr_flow_sport) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flow_dport is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flow_dport', TType.I16, 12, annotations) < 0: return -1
      if oprot.writeI16(self.fr_flow_dport) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flow_proto is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flow_proto', TType.BYTE, 13, annotations) < 0: return -1
      if oprot.writeByte(self.fr_flow_proto) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flow_vrf is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flow_vrf', TType.I16, 14, annotations) < 0: return -1
      if oprot.writeI16(self.fr_flow_vrf) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flow_dvrf is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flow_dvrf', TType.I16, 15, annotations) < 0: return -1
      if oprot.writeI16(self.fr_flow_dvrf) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_mir_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_mir_id', TType.I16, 16, annotations) < 0: return -1
      if oprot.writeI16(self.fr_mir_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_sec_mir_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_sec_mir_id', TType.I16, 17, annotations) < 0: return -1
      if oprot.writeI16(self.fr_sec_mir_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_mir_sip is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_mir_sip', TType.I32, 18, annotations) < 0: return -1
      if oprot.writeI32(self.fr_mir_sip) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_mir_sport is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_mir_sport', TType.I16, 19, annotations) < 0: return -1
      if oprot.writeI16(self.fr_mir_sport) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_pcap_meta_data is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_pcap_meta_data', TType.LIST, 20, annotations) < 0: return -1
      if oprot.writeListBegin(TType.BYTE, len(self.fr_pcap_meta_data)) < 0: return -1
      for iter86 in self.fr_pcap_meta_data:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeByte(iter86) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_mir_vrf is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_mir_vrf', TType.I16, 21, annotations) < 0: return -1
      if oprot.writeI16(self.fr_mir_vrf) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_ecmp_nh_index is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_ecmp_nh_index', TType.I32, 22, annotations) < 0: return -1
      if oprot.writeI32(self.fr_ecmp_nh_index) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_src_nh_index is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_src_nh_index', TType.I32, 23, annotations) < 0: return -1
      if oprot.writeI32(self.fr_src_nh_index) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_flow_nh_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_flow_nh_id', TType.I32, 24, annotations) < 0: return -1
      if oprot.writeI32(self.fr_flow_nh_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_drop_reason is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_drop_reason', TType.I16, 25, annotations) < 0: return -1
      if oprot.writeI16(self.fr_drop_reason) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_file_path is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_file_path', TType.STRING, 26, annotations) < 0: return -1
      if oprot.writeString(self.fr_file_path) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_processed is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_processed', TType.I64, 27, annotations) < 0: return -1
      if oprot.writeI64(self.fr_processed) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_created is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_created', TType.I64, 28, annotations) < 0: return -1
      if oprot.writeI64(self.fr_created) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_added is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_added', TType.I64, 29, annotations) < 0: return -1
      if oprot.writeI64(self.fr_added) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_cpus is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_cpus', TType.I32, 30, annotations) < 0: return -1
      if oprot.writeI32(self.fr_cpus) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_hold_oflows is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_hold_oflows', TType.I32, 31, annotations) < 0: return -1
      if oprot.writeI32(self.fr_hold_oflows) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.fr_hold_stat is not None:
      annotations = {}
      if oprot.writeFieldBegin('fr_hold_stat', TType.LIST, 32, annotations) < 0: return -1
      if oprot.writeListBegin(TType.I32, len(self.fr_hold_stat)) < 0: return -1
      for iter87 in self.fr_hold_stat:
        if oprot.writeContainerElementBegin() < 0: return -1
        if oprot.writeI32(iter87) < 0: return -1
        if oprot.writeContainerElementEnd() < 0: return -1
      if oprot.writeListEnd() < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.fr_op != other.fr_op:
      return False
    if self.fr_rid != other.fr_rid:
      return False
    if self.fr_index != other.fr_index:
      return False
    if self.fr_action != other.fr_action:
      return False
    if self.fr_flags != other.fr_flags:
      return False
    if self.fr_ftable_size != other.fr_ftable_size:
      return False
    if self.fr_ftable_dev != other.fr_ftable_dev:
      return False
    if self.fr_rindex != other.fr_rindex:
      return False
    if self.fr_family != other.fr_family:
      return False
    if self.fr_flow_ip != other.fr_flow_ip:
      return False
    if self.fr_flow_sport != other.fr_flow_sport:
      return False
    if self.fr_flow_dport != other.fr_flow_dport:
      return False
    if self.fr_flow_proto != other.fr_flow_proto:
      return False
    if self.fr_flow_vrf != other.fr_flow_vrf:
      return False
    if self.fr_flow_dvrf != other.fr_flow_dvrf:
      return False
    if self.fr_mir_id != other.fr_mir_id:
      return False
    if self.fr_sec_mir_id != other.fr_sec_mir_id:
      return False
    if self.fr_mir_sip != other.fr_mir_sip:
      return False
    if self.fr_mir_sport != other.fr_mir_sport:
      return False
    if self.fr_pcap_meta_data != other.fr_pcap_meta_data:
      return False
    if self.fr_mir_vrf != other.fr_mir_vrf:
      return False
    if self.fr_ecmp_nh_index != other.fr_ecmp_nh_index:
      return False
    if self.fr_src_nh_index != other.fr_src_nh_index:
      return False
    if self.fr_flow_nh_id != other.fr_flow_nh_id:
      return False
    if self.fr_drop_reason != other.fr_drop_reason:
      return False
    if self.fr_file_path != other.fr_file_path:
      return False
    if self.fr_processed != other.fr_processed:
      return False
    if self.fr_created != other.fr_created:
      return False
    if self.fr_added != other.fr_added:
      return False
    if self.fr_cpus != other.fr_cpus:
      return False
    if self.fr_hold_oflows != other.fr_hold_oflows:
      return False
    if self.fr_hold_stat != other.fr_hold_stat:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_vrf_assign_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I16, 'var_rid', None, None, ), # 2
    (3, TType.I16, 'var_vif_index', None, None, ), # 3
    (4, TType.I32, 'var_vif_vrf', None, None, ), # 4
    (5, TType.I16, 'var_vlan_id', None, None, ), # 5
    (6, TType.I16, 'var_marker', None, None, ), # 6
    (7, TType.I32, 'var_nh_id', None, None, ), # 7
  )

  def __init__(self, h_op=None, var_rid=None, var_vif_index=None, var_vif_vrf=None, var_vlan_id=None, var_marker=None, var_nh_id=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.var_rid = var_rid
    self.var_vif_index = var_vif_index
    self.var_vif_vrf = var_vif_vrf
    self.var_vlan_id = var_vlan_id
    self.var_marker = var_marker
    self.var_nh_id = var_nh_id
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1879108738
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_vrf_assign_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.var_rid is not None:
      log_str.write('var_rid = ')
      log_str.write(str(self.var_rid))
      log_str.write('  ')
    if self.var_vif_index is not None:
      log_str.write('var_vif_index = ')
      log_str.write(str(self.var_vif_index))
      log_str.write('  ')
    if self.var_vif_vrf is not None:
      log_str.write('var_vif_vrf = ')
      log_str.write(str(self.var_vif_vrf))
      log_str.write('  ')
    if self.var_vlan_id is not None:
      log_str.write('var_vlan_id = ')
      log_str.write(str(self.var_vlan_id))
      log_str.write('  ')
    if self.var_marker is not None:
      log_str.write('var_marker = ')
      log_str.write(str(self.var_marker))
      log_str.write('  ')
    if self.var_nh_id is not None:
      log_str.write('var_nh_id = ')
      log_str.write(str(self.var_nh_id))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          (length, self.var_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          (length, self.var_vif_index) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          (length, self.var_vif_vrf) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          (length, self.var_vlan_id) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          (length, self.var_marker) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          (length, self.var_nh_id) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_vrf_assign_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.var_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('var_rid', TType.I16, 2, annotations) < 0: return -1
      if oprot.writeI16(self.var_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.var_vif_index is not None:
      annotations = {}
      if oprot.writeFieldBegin('var_vif_index', TType.I16, 3, annotations) < 0: return -1
      if oprot.writeI16(self.var_vif_index) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.var_vif_vrf is not None:
      annotations = {}
      if oprot.writeFieldBegin('var_vif_vrf', TType.I32, 4, annotations) < 0: return -1
      if oprot.writeI32(self.var_vif_vrf) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.var_vlan_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('var_vlan_id', TType.I16, 5, annotations) < 0: return -1
      if oprot.writeI16(self.var_vlan_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.var_marker is not None:
      annotations = {}
      if oprot.writeFieldBegin('var_marker', TType.I16, 6, annotations) < 0: return -1
      if oprot.writeI16(self.var_marker) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.var_nh_id is not None:
      annotations = {}
      if oprot.writeFieldBegin('var_nh_id', TType.I32, 7, annotations) < 0: return -1
      if oprot.writeI32(self.var_nh_id) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.var_rid != other.var_rid:
      return False
    if self.var_vif_index != other.var_vif_index:
      return False
    if self.var_vif_vrf != other.var_vif_vrf:
      return False
    if self.var_vlan_id != other.var_vlan_id:
      return False
    if self.var_marker != other.var_marker:
      return False
    if self.var_nh_id != other.var_nh_id:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_vrf_stats_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I16, 'vsr_rid', None, None, ), # 2
    (3, TType.I16, 'vsr_family', None, None, ), # 3
    (4, TType.I16, 'vsr_type', None, None, ), # 4
    (5, TType.I32, 'vsr_vrf', None, None, ), # 5
    (6, TType.I64, 'vsr_discards', None, None, ), # 6
    (7, TType.I64, 'vsr_resolves', None, None, ), # 7
    (8, TType.I64, 'vsr_receives', None, None, ), # 8
    (9, TType.I64, 'vsr_ecmp_composites', None, None, ), # 9
    (10, TType.I64, 'vsr_l2_mcast_composites', None, None, ), # 10
    (11, TType.I64, 'vsr_fabric_composites', None, None, ), # 11
    (12, TType.I64, 'vsr_udp_tunnels', None, None, ), # 12
    (13, TType.I64, 'vsr_udp_mpls_tunnels', None, None, ), # 13
    (14, TType.I64, 'vsr_gre_mpls_tunnels', None, None, ), # 14
    (15, TType.I64, 'vsr_l2_encaps', None, None, ), # 15
    (16, TType.I64, 'vsr_encaps', None, None, ), # 16
    (17, TType.I16, 'vsr_marker', None, None, ), # 17
    (18, TType.I64, 'vsr_gros', None, None, ), # 18
    (19, TType.I64, 'vsr_diags', None, None, ), # 19
    (20, TType.I64, 'vsr_encap_composites', None, None, ), # 20
    (21, TType.I64, 'vsr_evpn_composites', None, None, ), # 21
    (22, TType.I64, 'vsr_vrf_translates', None, None, ), # 22
    (23, TType.I64, 'vsr_vxlan_tunnels', None, None, ), # 23
    (24, TType.I64, 'vsr_arp_virtual_proxy', None, None, ), # 24
    (25, TType.I64, 'vsr_arp_virtual_stitch', None, None, ), # 25
    (26, TType.I64, 'vsr_arp_virtual_flood', None, None, ), # 26
    (27, TType.I64, 'vsr_arp_physical_stitch', None, None, ), # 27
    (28, TType.I64, 'vsr_arp_tor_proxy', None, None, ), # 28
    (29, TType.I64, 'vsr_arp_physical_flood', None, None, ), # 29
    (30, TType.I64, 'vsr_l2_receives', None, None, ), # 30
    (31, TType.I64, 'vsr_uuc_floods', None, None, ), # 31
  )

  def __init__(self, h_op=None, vsr_rid=None, vsr_family=None, vsr_type=None, vsr_vrf=None, vsr_discards=None, vsr_resolves=None, vsr_receives=None, vsr_ecmp_composites=None, vsr_l2_mcast_composites=None, vsr_fabric_composites=None, vsr_udp_tunnels=None, vsr_udp_mpls_tunnels=None, vsr_gre_mpls_tunnels=None, vsr_l2_encaps=None, vsr_encaps=None, vsr_marker=None, vsr_gros=None, vsr_diags=None, vsr_encap_composites=None, vsr_evpn_composites=None, vsr_vrf_translates=None, vsr_vxlan_tunnels=None, vsr_arp_virtual_proxy=None, vsr_arp_virtual_stitch=None, vsr_arp_virtual_flood=None, vsr_arp_physical_stitch=None, vsr_arp_tor_proxy=None, vsr_arp_physical_flood=None, vsr_l2_receives=None, vsr_uuc_floods=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.vsr_rid = vsr_rid
    self.vsr_family = vsr_family
    self.vsr_type = vsr_type
    self.vsr_vrf = vsr_vrf
    self.vsr_discards = vsr_discards
    self.vsr_resolves = vsr_resolves
    self.vsr_receives = vsr_receives
    self.vsr_ecmp_composites = vsr_ecmp_composites
    self.vsr_l2_mcast_composites = vsr_l2_mcast_composites
    self.vsr_fabric_composites = vsr_fabric_composites
    self.vsr_udp_tunnels = vsr_udp_tunnels
    self.vsr_udp_mpls_tunnels = vsr_udp_mpls_tunnels
    self.vsr_gre_mpls_tunnels = vsr_gre_mpls_tunnels
    self.vsr_l2_encaps = vsr_l2_encaps
    self.vsr_encaps = vsr_encaps
    self.vsr_marker = vsr_marker
    self.vsr_gros = vsr_gros
    self.vsr_diags = vsr_diags
    self.vsr_encap_composites = vsr_encap_composites
    self.vsr_evpn_composites = vsr_evpn_composites
    self.vsr_vrf_translates = vsr_vrf_translates
    self.vsr_vxlan_tunnels = vsr_vxlan_tunnels
    self.vsr_arp_virtual_proxy = vsr_arp_virtual_proxy
    self.vsr_arp_virtual_stitch = vsr_arp_virtual_stitch
    self.vsr_arp_virtual_flood = vsr_arp_virtual_flood
    self.vsr_arp_physical_stitch = vsr_arp_physical_stitch
    self.vsr_arp_tor_proxy = vsr_arp_tor_proxy
    self.vsr_arp_physical_flood = vsr_arp_physical_flood
    self.vsr_l2_receives = vsr_l2_receives
    self.vsr_uuc_floods = vsr_uuc_floods
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 3888476852
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_vrf_stats_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.vsr_rid is not None:
      log_str.write('vsr_rid = ')
      log_str.write(str(self.vsr_rid))
      log_str.write('  ')
    if self.vsr_family is not None:
      log_str.write('vsr_family = ')
      log_str.write(str(self.vsr_family))
      log_str.write('  ')
    if self.vsr_type is not None:
      log_str.write('vsr_type = ')
      log_str.write(str(self.vsr_type))
      log_str.write('  ')
    if self.vsr_vrf is not None:
      log_str.write('vsr_vrf = ')
      log_str.write(str(self.vsr_vrf))
      log_str.write('  ')
    if self.vsr_discards is not None:
      log_str.write('vsr_discards = ')
      log_str.write(str(self.vsr_discards))
      log_str.write('  ')
    if self.vsr_resolves is not None:
      log_str.write('vsr_resolves = ')
      log_str.write(str(self.vsr_resolves))
      log_str.write('  ')
    if self.vsr_receives is not None:
      log_str.write('vsr_receives = ')
      log_str.write(str(self.vsr_receives))
      log_str.write('  ')
    if self.vsr_ecmp_composites is not None:
      log_str.write('vsr_ecmp_composites = ')
      log_str.write(str(self.vsr_ecmp_composites))
      log_str.write('  ')
    if self.vsr_l2_mcast_composites is not None:
      log_str.write('vsr_l2_mcast_composites = ')
      log_str.write(str(self.vsr_l2_mcast_composites))
      log_str.write('  ')
    if self.vsr_fabric_composites is not None:
      log_str.write('vsr_fabric_composites = ')
      log_str.write(str(self.vsr_fabric_composites))
      log_str.write('  ')
    if self.vsr_udp_tunnels is not None:
      log_str.write('vsr_udp_tunnels = ')
      log_str.write(str(self.vsr_udp_tunnels))
      log_str.write('  ')
    if self.vsr_udp_mpls_tunnels is not None:
      log_str.write('vsr_udp_mpls_tunnels = ')
      log_str.write(str(self.vsr_udp_mpls_tunnels))
      log_str.write('  ')
    if self.vsr_gre_mpls_tunnels is not None:
      log_str.write('vsr_gre_mpls_tunnels = ')
      log_str.write(str(self.vsr_gre_mpls_tunnels))
      log_str.write('  ')
    if self.vsr_l2_encaps is not None:
      log_str.write('vsr_l2_encaps = ')
      log_str.write(str(self.vsr_l2_encaps))
      log_str.write('  ')
    if self.vsr_encaps is not None:
      log_str.write('vsr_encaps = ')
      log_str.write(str(self.vsr_encaps))
      log_str.write('  ')
    if self.vsr_marker is not None:
      log_str.write('vsr_marker = ')
      log_str.write(str(self.vsr_marker))
      log_str.write('  ')
    if self.vsr_gros is not None:
      log_str.write('vsr_gros = ')
      log_str.write(str(self.vsr_gros))
      log_str.write('  ')
    if self.vsr_diags is not None:
      log_str.write('vsr_diags = ')
      log_str.write(str(self.vsr_diags))
      log_str.write('  ')
    if self.vsr_encap_composites is not None:
      log_str.write('vsr_encap_composites = ')
      log_str.write(str(self.vsr_encap_composites))
      log_str.write('  ')
    if self.vsr_evpn_composites is not None:
      log_str.write('vsr_evpn_composites = ')
      log_str.write(str(self.vsr_evpn_composites))
      log_str.write('  ')
    if self.vsr_vrf_translates is not None:
      log_str.write('vsr_vrf_translates = ')
      log_str.write(str(self.vsr_vrf_translates))
      log_str.write('  ')
    if self.vsr_vxlan_tunnels is not None:
      log_str.write('vsr_vxlan_tunnels = ')
      log_str.write(str(self.vsr_vxlan_tunnels))
      log_str.write('  ')
    if self.vsr_arp_virtual_proxy is not None:
      log_str.write('vsr_arp_virtual_proxy = ')
      log_str.write(str(self.vsr_arp_virtual_proxy))
      log_str.write('  ')
    if self.vsr_arp_virtual_stitch is not None:
      log_str.write('vsr_arp_virtual_stitch = ')
      log_str.write(str(self.vsr_arp_virtual_stitch))
      log_str.write('  ')
    if self.vsr_arp_virtual_flood is not None:
      log_str.write('vsr_arp_virtual_flood = ')
      log_str.write(str(self.vsr_arp_virtual_flood))
      log_str.write('  ')
    if self.vsr_arp_physical_stitch is not None:
      log_str.write('vsr_arp_physical_stitch = ')
      log_str.write(str(self.vsr_arp_physical_stitch))
      log_str.write('  ')
    if self.vsr_arp_tor_proxy is not None:
      log_str.write('vsr_arp_tor_proxy = ')
      log_str.write(str(self.vsr_arp_tor_proxy))
      log_str.write('  ')
    if self.vsr_arp_physical_flood is not None:
      log_str.write('vsr_arp_physical_flood = ')
      log_str.write(str(self.vsr_arp_physical_flood))
      log_str.write('  ')
    if self.vsr_l2_receives is not None:
      log_str.write('vsr_l2_receives = ')
      log_str.write(str(self.vsr_l2_receives))
      log_str.write('  ')
    if self.vsr_uuc_floods is not None:
      log_str.write('vsr_uuc_floods = ')
      log_str.write(str(self.vsr_uuc_floods))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          (length, self.vsr_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          (length, self.vsr_family) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          (length, self.vsr_type) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          (length, self.vsr_vrf) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          (length, self.vsr_discards) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          (length, self.vsr_resolves) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          (length, self.vsr_receives) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          (length, self.vsr_ecmp_composites) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          (length, self.vsr_l2_mcast_composites) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          (length, self.vsr_fabric_composites) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          (length, self.vsr_udp_tunnels) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          (length, self.vsr_udp_mpls_tunnels) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          (length, self.vsr_gre_mpls_tunnels) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          (length, self.vsr_l2_encaps) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          (length, self.vsr_encaps) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I16:
          (length, self.vsr_marker) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          (length, self.vsr_gros) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          (length, self.vsr_diags) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          (length, self.vsr_encap_composites) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          (length, self.vsr_evpn_composites) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          (length, self.vsr_vrf_translates) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          (length, self.vsr_vxlan_tunnels) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          (length, self.vsr_arp_virtual_proxy) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I64:
          (length, self.vsr_arp_virtual_stitch) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I64:
          (length, self.vsr_arp_virtual_flood) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I64:
          (length, self.vsr_arp_physical_stitch) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I64:
          (length, self.vsr_arp_tor_proxy) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          (length, self.vsr_arp_physical_flood) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          (length, self.vsr_l2_receives) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I64:
          (length, self.vsr_uuc_floods) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_vrf_stats_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_rid', TType.I16, 2, annotations) < 0: return -1
      if oprot.writeI16(self.vsr_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_family is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_family', TType.I16, 3, annotations) < 0: return -1
      if oprot.writeI16(self.vsr_family) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_type is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_type', TType.I16, 4, annotations) < 0: return -1
      if oprot.writeI16(self.vsr_type) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_vrf is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_vrf', TType.I32, 5, annotations) < 0: return -1
      if oprot.writeI32(self.vsr_vrf) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_discards is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_discards', TType.I64, 6, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_discards) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_resolves is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_resolves', TType.I64, 7, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_resolves) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_receives is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_receives', TType.I64, 8, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_receives) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_ecmp_composites is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_ecmp_composites', TType.I64, 9, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_ecmp_composites) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_l2_mcast_composites is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_l2_mcast_composites', TType.I64, 10, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_l2_mcast_composites) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_fabric_composites is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_fabric_composites', TType.I64, 11, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_fabric_composites) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_udp_tunnels is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_udp_tunnels', TType.I64, 12, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_udp_tunnels) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_udp_mpls_tunnels is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_udp_mpls_tunnels', TType.I64, 13, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_udp_mpls_tunnels) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_gre_mpls_tunnels is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_gre_mpls_tunnels', TType.I64, 14, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_gre_mpls_tunnels) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_l2_encaps is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_l2_encaps', TType.I64, 15, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_l2_encaps) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_encaps is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_encaps', TType.I64, 16, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_encaps) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_marker is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_marker', TType.I16, 17, annotations) < 0: return -1
      if oprot.writeI16(self.vsr_marker) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_gros is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_gros', TType.I64, 18, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_gros) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_diags is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_diags', TType.I64, 19, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_diags) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_encap_composites is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_encap_composites', TType.I64, 20, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_encap_composites) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_evpn_composites is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_evpn_composites', TType.I64, 21, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_evpn_composites) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_vrf_translates is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_vrf_translates', TType.I64, 22, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_vrf_translates) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_vxlan_tunnels is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_vxlan_tunnels', TType.I64, 23, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_vxlan_tunnels) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_arp_virtual_proxy is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_arp_virtual_proxy', TType.I64, 24, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_arp_virtual_proxy) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_arp_virtual_stitch is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_arp_virtual_stitch', TType.I64, 25, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_arp_virtual_stitch) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_arp_virtual_flood is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_arp_virtual_flood', TType.I64, 26, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_arp_virtual_flood) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_arp_physical_stitch is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_arp_physical_stitch', TType.I64, 27, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_arp_physical_stitch) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_arp_tor_proxy is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_arp_tor_proxy', TType.I64, 28, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_arp_tor_proxy) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_arp_physical_flood is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_arp_physical_flood', TType.I64, 29, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_arp_physical_flood) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_l2_receives is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_l2_receives', TType.I64, 30, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_l2_receives) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vsr_uuc_floods is not None:
      annotations = {}
      if oprot.writeFieldBegin('vsr_uuc_floods', TType.I64, 31, annotations) < 0: return -1
      if oprot.writeI64(self.vsr_uuc_floods) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.vsr_rid != other.vsr_rid:
      return False
    if self.vsr_family != other.vsr_family:
      return False
    if self.vsr_type != other.vsr_type:
      return False
    if self.vsr_vrf != other.vsr_vrf:
      return False
    if self.vsr_discards != other.vsr_discards:
      return False
    if self.vsr_resolves != other.vsr_resolves:
      return False
    if self.vsr_receives != other.vsr_receives:
      return False
    if self.vsr_ecmp_composites != other.vsr_ecmp_composites:
      return False
    if self.vsr_l2_mcast_composites != other.vsr_l2_mcast_composites:
      return False
    if self.vsr_fabric_composites != other.vsr_fabric_composites:
      return False
    if self.vsr_udp_tunnels != other.vsr_udp_tunnels:
      return False
    if self.vsr_udp_mpls_tunnels != other.vsr_udp_mpls_tunnels:
      return False
    if self.vsr_gre_mpls_tunnels != other.vsr_gre_mpls_tunnels:
      return False
    if self.vsr_l2_encaps != other.vsr_l2_encaps:
      return False
    if self.vsr_encaps != other.vsr_encaps:
      return False
    if self.vsr_marker != other.vsr_marker:
      return False
    if self.vsr_gros != other.vsr_gros:
      return False
    if self.vsr_diags != other.vsr_diags:
      return False
    if self.vsr_encap_composites != other.vsr_encap_composites:
      return False
    if self.vsr_evpn_composites != other.vsr_evpn_composites:
      return False
    if self.vsr_vrf_translates != other.vsr_vrf_translates:
      return False
    if self.vsr_vxlan_tunnels != other.vsr_vxlan_tunnels:
      return False
    if self.vsr_arp_virtual_proxy != other.vsr_arp_virtual_proxy:
      return False
    if self.vsr_arp_virtual_stitch != other.vsr_arp_virtual_stitch:
      return False
    if self.vsr_arp_virtual_flood != other.vsr_arp_virtual_flood:
      return False
    if self.vsr_arp_physical_stitch != other.vsr_arp_physical_stitch:
      return False
    if self.vsr_arp_tor_proxy != other.vsr_arp_tor_proxy:
      return False
    if self.vsr_arp_physical_flood != other.vsr_arp_physical_flood:
      return False
    if self.vsr_l2_receives != other.vsr_l2_receives:
      return False
    if self.vsr_uuc_floods != other.vsr_uuc_floods:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_response(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I32, 'resp_code', None, None, ), # 2
  )

  def __init__(self, h_op=None, resp_code=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.resp_code = resp_code
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 2734925638
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_response: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.resp_code is not None:
      log_str.write('resp_code = ')
      log_str.write(str(self.resp_code))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          (length, self.resp_code) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_response') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.resp_code is not None:
      annotations = {}
      if oprot.writeFieldBegin('resp_code', TType.I32, 2, annotations) < 0: return -1
      if oprot.writeI32(self.resp_code) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.resp_code != other.resp_code:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vrouter_ops(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I32, 'vo_rid', None, None, ), # 2
    (3, TType.I32, 'vo_mpls_labels', None, None, ), # 3
    (4, TType.I32, 'vo_nexthops', None, None, ), # 4
    (5, TType.I32, 'vo_bridge_entries', None, None, ), # 5
    (6, TType.I32, 'vo_oflow_bridge_entries', None, None, ), # 6
    (7, TType.I32, 'vo_flow_entries', None, None, ), # 7
    (8, TType.I32, 'vo_oflow_entries', None, None, ), # 8
    (9, TType.I32, 'vo_interfaces', None, None, ), # 9
    (10, TType.I32, 'vo_mirror_entries', None, None, ), # 10
    (11, TType.I32, 'vo_vrfs', None, None, ), # 11
    (12, TType.STRING, 'vo_build_info', None, None, ), # 12
  )

  def __init__(self, h_op=None, vo_rid=None, vo_mpls_labels=None, vo_nexthops=None, vo_bridge_entries=None, vo_oflow_bridge_entries=None, vo_flow_entries=None, vo_oflow_entries=None, vo_interfaces=None, vo_mirror_entries=None, vo_vrfs=None, vo_build_info=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.vo_rid = vo_rid
    self.vo_mpls_labels = vo_mpls_labels
    self.vo_nexthops = vo_nexthops
    self.vo_bridge_entries = vo_bridge_entries
    self.vo_oflow_bridge_entries = vo_oflow_bridge_entries
    self.vo_flow_entries = vo_flow_entries
    self.vo_oflow_entries = vo_oflow_entries
    self.vo_interfaces = vo_interfaces
    self.vo_mirror_entries = vo_mirror_entries
    self.vo_vrfs = vo_vrfs
    self.vo_build_info = vo_build_info
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 4194548748
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vrouter_ops: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.vo_rid is not None:
      log_str.write('vo_rid = ')
      log_str.write(str(self.vo_rid))
      log_str.write('  ')
    if self.vo_mpls_labels is not None:
      log_str.write('vo_mpls_labels = ')
      log_str.write(str(self.vo_mpls_labels))
      log_str.write('  ')
    if self.vo_nexthops is not None:
      log_str.write('vo_nexthops = ')
      log_str.write(str(self.vo_nexthops))
      log_str.write('  ')
    if self.vo_bridge_entries is not None:
      log_str.write('vo_bridge_entries = ')
      log_str.write(str(self.vo_bridge_entries))
      log_str.write('  ')
    if self.vo_oflow_bridge_entries is not None:
      log_str.write('vo_oflow_bridge_entries = ')
      log_str.write(str(self.vo_oflow_bridge_entries))
      log_str.write('  ')
    if self.vo_flow_entries is not None:
      log_str.write('vo_flow_entries = ')
      log_str.write(str(self.vo_flow_entries))
      log_str.write('  ')
    if self.vo_oflow_entries is not None:
      log_str.write('vo_oflow_entries = ')
      log_str.write(str(self.vo_oflow_entries))
      log_str.write('  ')
    if self.vo_interfaces is not None:
      log_str.write('vo_interfaces = ')
      log_str.write(str(self.vo_interfaces))
      log_str.write('  ')
    if self.vo_mirror_entries is not None:
      log_str.write('vo_mirror_entries = ')
      log_str.write(str(self.vo_mirror_entries))
      log_str.write('  ')
    if self.vo_vrfs is not None:
      log_str.write('vo_vrfs = ')
      log_str.write(str(self.vo_vrfs))
      log_str.write('  ')
    if self.vo_build_info is not None:
      log_str.write('vo_build_info = ')
      log_str.write(self.vo_build_info)
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          (length, self.vo_rid) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          (length, self.vo_mpls_labels) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          (length, self.vo_nexthops) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          (length, self.vo_bridge_entries) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          (length, self.vo_oflow_bridge_entries) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          (length, self.vo_flow_entries) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          (length, self.vo_oflow_entries) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          (length, self.vo_interfaces) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          (length, self.vo_mirror_entries) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          (length, self.vo_vrfs) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          (length, self.vo_build_info) = iprot.readString();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vrouter_ops') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_rid', TType.I32, 2, annotations) < 0: return -1
      if oprot.writeI32(self.vo_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_mpls_labels is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_mpls_labels', TType.I32, 3, annotations) < 0: return -1
      if oprot.writeI32(self.vo_mpls_labels) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_nexthops is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_nexthops', TType.I32, 4, annotations) < 0: return -1
      if oprot.writeI32(self.vo_nexthops) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_bridge_entries is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_bridge_entries', TType.I32, 5, annotations) < 0: return -1
      if oprot.writeI32(self.vo_bridge_entries) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_oflow_bridge_entries is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_oflow_bridge_entries', TType.I32, 6, annotations) < 0: return -1
      if oprot.writeI32(self.vo_oflow_bridge_entries) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_flow_entries is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_flow_entries', TType.I32, 7, annotations) < 0: return -1
      if oprot.writeI32(self.vo_flow_entries) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_oflow_entries is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_oflow_entries', TType.I32, 8, annotations) < 0: return -1
      if oprot.writeI32(self.vo_oflow_entries) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_interfaces is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_interfaces', TType.I32, 9, annotations) < 0: return -1
      if oprot.writeI32(self.vo_interfaces) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_mirror_entries is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_mirror_entries', TType.I32, 10, annotations) < 0: return -1
      if oprot.writeI32(self.vo_mirror_entries) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_vrfs is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_vrfs', TType.I32, 11, annotations) < 0: return -1
      if oprot.writeI32(self.vo_vrfs) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vo_build_info is not None:
      annotations = {}
      if oprot.writeFieldBegin('vo_build_info', TType.STRING, 12, annotations) < 0: return -1
      if oprot.writeString(self.vo_build_info) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.vo_rid != other.vo_rid:
      return False
    if self.vo_mpls_labels != other.vo_mpls_labels:
      return False
    if self.vo_nexthops != other.vo_nexthops:
      return False
    if self.vo_bridge_entries != other.vo_bridge_entries:
      return False
    if self.vo_oflow_bridge_entries != other.vo_oflow_bridge_entries:
      return False
    if self.vo_flow_entries != other.vo_flow_entries:
      return False
    if self.vo_oflow_entries != other.vo_oflow_entries:
      return False
    if self.vo_interfaces != other.vo_interfaces:
      return False
    if self.vo_mirror_entries != other.vo_mirror_entries:
      return False
    if self.vo_vrfs != other.vo_vrfs:
      return False
    if self.vo_build_info != other.vo_build_info:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class vr_drop_stats_req(sandesh_base.SandeshBuffer):

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'h_op', None, None, ), # 1
    (2, TType.I16, 'vds_rid', None, None, ), # 2
    (3, TType.I64, 'vds_discard', None, None, ), # 3
    (4, TType.I64, 'vds_pull', None, None, ), # 4
    (5, TType.I64, 'vds_invalid_if', None, None, ), # 5
    (6, TType.I64, 'vds_arp_no_where_to_go', None, None, ), # 6
    (7, TType.I64, 'vds_garp_from_vm', None, None, ), # 7
    (8, TType.I64, 'vds_invalid_arp', None, None, ), # 8
    (9, TType.I64, 'vds_trap_no_if', None, None, ), # 9
    (10, TType.I64, 'vds_nowhere_to_go', None, None, ), # 10
    (11, TType.I64, 'vds_flow_queue_limit_exceeded', None, None, ), # 11
    (12, TType.I64, 'vds_flow_no_memory', None, None, ), # 12
    (13, TType.I64, 'vds_flow_invalid_protocol', None, None, ), # 13
    (14, TType.I64, 'vds_flow_nat_no_rflow', None, None, ), # 14
    (15, TType.I64, 'vds_flow_action_drop', None, None, ), # 15
    (16, TType.I64, 'vds_flow_action_invalid', None, None, ), # 16
    (17, TType.I64, 'vds_flow_unusable', None, None, ), # 17
    (18, TType.I64, 'vds_flow_table_full', None, None, ), # 18
    (19, TType.I64, 'vds_interface_tx_discard', None, None, ), # 19
    (20, TType.I64, 'vds_interface_drop', None, None, ), # 20
    (21, TType.I64, 'vds_duplicated', None, None, ), # 21
    (22, TType.I64, 'vds_push', None, None, ), # 22
    (23, TType.I64, 'vds_ttl_exceeded', None, None, ), # 23
    (24, TType.I64, 'vds_invalid_nh', None, None, ), # 24
    (25, TType.I64, 'vds_invalid_label', None, None, ), # 25
    (26, TType.I64, 'vds_invalid_protocol', None, None, ), # 26
    (27, TType.I64, 'vds_interface_rx_discard', None, None, ), # 27
    (28, TType.I64, 'vds_invalid_mcast_source', None, None, ), # 28
    (29, TType.I64, 'vds_head_alloc_fail', None, None, ), # 29
    (30, TType.I64, 'vds_head_space_reserve_fail', None, None, ), # 30
    (31, TType.I64, 'vds_pcow_fail', None, None, ), # 31
    (32, TType.I64, 'vds_flood', None, None, ), # 32
    (33, TType.I64, 'vds_mcast_clone_fail', None, None, ), # 33
    (34, TType.I64, 'vds_composite_invalid_interface', None, None, ), # 34
    (35, TType.I64, 'vds_rewrite_fail', None, None, ), # 35
    (36, TType.I64, 'vds_misc', None, None, ), # 36
    (37, TType.I64, 'vds_invalid_packet', None, None, ), # 37
    (38, TType.I64, 'vds_cksum_err', None, None, ), # 38
    (39, TType.I64, 'vds_clone_fail', None, None, ), # 39
    (40, TType.I64, 'vds_no_fmd', None, None, ), # 40
    (41, TType.I64, 'vds_cloned_original', None, None, ), # 41
    (42, TType.I64, 'vds_invalid_vnid', None, None, ), # 42
    (43, TType.I64, 'vds_frag_err', None, None, ), # 43
    (44, TType.I64, 'vds_invalid_source', None, None, ), # 44
    (45, TType.I64, 'vds_mcast_df_bit', None, None, ), # 45
    (46, TType.I64, 'vds_arp_no_route', None, None, ), # 46
    (47, TType.I64, 'vds_l2_no_route', None, None, ), # 47
    (48, TType.I64, 'vds_arp_reply_no_route', None, None, ), # 48
  )

  def __init__(self, h_op=None, vds_rid=None, vds_discard=None, vds_pull=None, vds_invalid_if=None, vds_arp_no_where_to_go=None, vds_garp_from_vm=None, vds_invalid_arp=None, vds_trap_no_if=None, vds_nowhere_to_go=None, vds_flow_queue_limit_exceeded=None, vds_flow_no_memory=None, vds_flow_invalid_protocol=None, vds_flow_nat_no_rflow=None, vds_flow_action_drop=None, vds_flow_action_invalid=None, vds_flow_unusable=None, vds_flow_table_full=None, vds_interface_tx_discard=None, vds_interface_drop=None, vds_duplicated=None, vds_push=None, vds_ttl_exceeded=None, vds_invalid_nh=None, vds_invalid_label=None, vds_invalid_protocol=None, vds_interface_rx_discard=None, vds_invalid_mcast_source=None, vds_head_alloc_fail=None, vds_head_space_reserve_fail=None, vds_pcow_fail=None, vds_flood=None, vds_mcast_clone_fail=None, vds_composite_invalid_interface=None, vds_rewrite_fail=None, vds_misc=None, vds_invalid_packet=None, vds_cksum_err=None, vds_clone_fail=None, vds_no_fmd=None, vds_cloned_original=None, vds_invalid_vnid=None, vds_frag_err=None, vds_invalid_source=None, vds_mcast_df_bit=None, vds_arp_no_route=None, vds_l2_no_route=None, vds_arp_reply_no_route=None, sandesh=sandesh_base.sandesh_global):
    sandesh_base.SandeshBuffer.__init__(self)
    self.h_op = h_op
    self.vds_rid = vds_rid
    self.vds_discard = vds_discard
    self.vds_pull = vds_pull
    self.vds_invalid_if = vds_invalid_if
    self.vds_arp_no_where_to_go = vds_arp_no_where_to_go
    self.vds_garp_from_vm = vds_garp_from_vm
    self.vds_invalid_arp = vds_invalid_arp
    self.vds_trap_no_if = vds_trap_no_if
    self.vds_nowhere_to_go = vds_nowhere_to_go
    self.vds_flow_queue_limit_exceeded = vds_flow_queue_limit_exceeded
    self.vds_flow_no_memory = vds_flow_no_memory
    self.vds_flow_invalid_protocol = vds_flow_invalid_protocol
    self.vds_flow_nat_no_rflow = vds_flow_nat_no_rflow
    self.vds_flow_action_drop = vds_flow_action_drop
    self.vds_flow_action_invalid = vds_flow_action_invalid
    self.vds_flow_unusable = vds_flow_unusable
    self.vds_flow_table_full = vds_flow_table_full
    self.vds_interface_tx_discard = vds_interface_tx_discard
    self.vds_interface_drop = vds_interface_drop
    self.vds_duplicated = vds_duplicated
    self.vds_push = vds_push
    self.vds_ttl_exceeded = vds_ttl_exceeded
    self.vds_invalid_nh = vds_invalid_nh
    self.vds_invalid_label = vds_invalid_label
    self.vds_invalid_protocol = vds_invalid_protocol
    self.vds_interface_rx_discard = vds_interface_rx_discard
    self.vds_invalid_mcast_source = vds_invalid_mcast_source
    self.vds_head_alloc_fail = vds_head_alloc_fail
    self.vds_head_space_reserve_fail = vds_head_space_reserve_fail
    self.vds_pcow_fail = vds_pcow_fail
    self.vds_flood = vds_flood
    self.vds_mcast_clone_fail = vds_mcast_clone_fail
    self.vds_composite_invalid_interface = vds_composite_invalid_interface
    self.vds_rewrite_fail = vds_rewrite_fail
    self.vds_misc = vds_misc
    self.vds_invalid_packet = vds_invalid_packet
    self.vds_cksum_err = vds_cksum_err
    self.vds_clone_fail = vds_clone_fail
    self.vds_no_fmd = vds_no_fmd
    self.vds_cloned_original = vds_cloned_original
    self.vds_invalid_vnid = vds_invalid_vnid
    self.vds_frag_err = vds_frag_err
    self.vds_invalid_source = vds_invalid_source
    self.vds_mcast_df_bit = vds_mcast_df_bit
    self.vds_arp_no_route = vds_arp_no_route
    self.vds_l2_no_route = vds_l2_no_route
    self.vds_arp_reply_no_route = vds_arp_reply_no_route
    self._scope = sandesh.scope()
    self._module = sandesh.module()
    self._source = sandesh.source_id()
    self._node_type = sandesh.node_type()
    self._instance_id = sandesh.instance_id()
    self._seqnum = 0
    self._timestamp = UTCTimestampUsec()
    self._versionsig = 1824952755
    self._hints = 0

  def log(self, trace=False):
    log_str = cStringIO.StringIO()
    if trace:
      log_str.write(str(self._timestamp))
      log_str.write(' ')
    log_str.write('vr_drop_stats_req: ')                                                                                                                                                                         
    if self.h_op is not None:
      log_str.write('h_op = ')
      log_str.write(str(self.h_op))
      log_str.write('  ')
    if self.vds_rid is not None:
      log_str.write('vds_rid = ')
      log_str.write(str(self.vds_rid))
      log_str.write('  ')
    if self.vds_discard is not None:
      log_str.write('vds_discard = ')
      log_str.write(str(self.vds_discard))
      log_str.write('  ')
    if self.vds_pull is not None:
      log_str.write('vds_pull = ')
      log_str.write(str(self.vds_pull))
      log_str.write('  ')
    if self.vds_invalid_if is not None:
      log_str.write('vds_invalid_if = ')
      log_str.write(str(self.vds_invalid_if))
      log_str.write('  ')
    if self.vds_arp_no_where_to_go is not None:
      log_str.write('vds_arp_no_where_to_go = ')
      log_str.write(str(self.vds_arp_no_where_to_go))
      log_str.write('  ')
    if self.vds_garp_from_vm is not None:
      log_str.write('vds_garp_from_vm = ')
      log_str.write(str(self.vds_garp_from_vm))
      log_str.write('  ')
    if self.vds_invalid_arp is not None:
      log_str.write('vds_invalid_arp = ')
      log_str.write(str(self.vds_invalid_arp))
      log_str.write('  ')
    if self.vds_trap_no_if is not None:
      log_str.write('vds_trap_no_if = ')
      log_str.write(str(self.vds_trap_no_if))
      log_str.write('  ')
    if self.vds_nowhere_to_go is not None:
      log_str.write('vds_nowhere_to_go = ')
      log_str.write(str(self.vds_nowhere_to_go))
      log_str.write('  ')
    if self.vds_flow_queue_limit_exceeded is not None:
      log_str.write('vds_flow_queue_limit_exceeded = ')
      log_str.write(str(self.vds_flow_queue_limit_exceeded))
      log_str.write('  ')
    if self.vds_flow_no_memory is not None:
      log_str.write('vds_flow_no_memory = ')
      log_str.write(str(self.vds_flow_no_memory))
      log_str.write('  ')
    if self.vds_flow_invalid_protocol is not None:
      log_str.write('vds_flow_invalid_protocol = ')
      log_str.write(str(self.vds_flow_invalid_protocol))
      log_str.write('  ')
    if self.vds_flow_nat_no_rflow is not None:
      log_str.write('vds_flow_nat_no_rflow = ')
      log_str.write(str(self.vds_flow_nat_no_rflow))
      log_str.write('  ')
    if self.vds_flow_action_drop is not None:
      log_str.write('vds_flow_action_drop = ')
      log_str.write(str(self.vds_flow_action_drop))
      log_str.write('  ')
    if self.vds_flow_action_invalid is not None:
      log_str.write('vds_flow_action_invalid = ')
      log_str.write(str(self.vds_flow_action_invalid))
      log_str.write('  ')
    if self.vds_flow_unusable is not None:
      log_str.write('vds_flow_unusable = ')
      log_str.write(str(self.vds_flow_unusable))
      log_str.write('  ')
    if self.vds_flow_table_full is not None:
      log_str.write('vds_flow_table_full = ')
      log_str.write(str(self.vds_flow_table_full))
      log_str.write('  ')
    if self.vds_interface_tx_discard is not None:
      log_str.write('vds_interface_tx_discard = ')
      log_str.write(str(self.vds_interface_tx_discard))
      log_str.write('  ')
    if self.vds_interface_drop is not None:
      log_str.write('vds_interface_drop = ')
      log_str.write(str(self.vds_interface_drop))
      log_str.write('  ')
    if self.vds_duplicated is not None:
      log_str.write('vds_duplicated = ')
      log_str.write(str(self.vds_duplicated))
      log_str.write('  ')
    if self.vds_push is not None:
      log_str.write('vds_push = ')
      log_str.write(str(self.vds_push))
      log_str.write('  ')
    if self.vds_ttl_exceeded is not None:
      log_str.write('vds_ttl_exceeded = ')
      log_str.write(str(self.vds_ttl_exceeded))
      log_str.write('  ')
    if self.vds_invalid_nh is not None:
      log_str.write('vds_invalid_nh = ')
      log_str.write(str(self.vds_invalid_nh))
      log_str.write('  ')
    if self.vds_invalid_label is not None:
      log_str.write('vds_invalid_label = ')
      log_str.write(str(self.vds_invalid_label))
      log_str.write('  ')
    if self.vds_invalid_protocol is not None:
      log_str.write('vds_invalid_protocol = ')
      log_str.write(str(self.vds_invalid_protocol))
      log_str.write('  ')
    if self.vds_interface_rx_discard is not None:
      log_str.write('vds_interface_rx_discard = ')
      log_str.write(str(self.vds_interface_rx_discard))
      log_str.write('  ')
    if self.vds_invalid_mcast_source is not None:
      log_str.write('vds_invalid_mcast_source = ')
      log_str.write(str(self.vds_invalid_mcast_source))
      log_str.write('  ')
    if self.vds_head_alloc_fail is not None:
      log_str.write('vds_head_alloc_fail = ')
      log_str.write(str(self.vds_head_alloc_fail))
      log_str.write('  ')
    if self.vds_head_space_reserve_fail is not None:
      log_str.write('vds_head_space_reserve_fail = ')
      log_str.write(str(self.vds_head_space_reserve_fail))
      log_str.write('  ')
    if self.vds_pcow_fail is not None:
      log_str.write('vds_pcow_fail = ')
      log_str.write(str(self.vds_pcow_fail))
      log_str.write('  ')
    if self.vds_flood is not None:
      log_str.write('vds_flood = ')
      log_str.write(str(self.vds_flood))
      log_str.write('  ')
    if self.vds_mcast_clone_fail is not None:
      log_str.write('vds_mcast_clone_fail = ')
      log_str.write(str(self.vds_mcast_clone_fail))
      log_str.write('  ')
    if self.vds_composite_invalid_interface is not None:
      log_str.write('vds_composite_invalid_interface = ')
      log_str.write(str(self.vds_composite_invalid_interface))
      log_str.write('  ')
    if self.vds_rewrite_fail is not None:
      log_str.write('vds_rewrite_fail = ')
      log_str.write(str(self.vds_rewrite_fail))
      log_str.write('  ')
    if self.vds_misc is not None:
      log_str.write('vds_misc = ')
      log_str.write(str(self.vds_misc))
      log_str.write('  ')
    if self.vds_invalid_packet is not None:
      log_str.write('vds_invalid_packet = ')
      log_str.write(str(self.vds_invalid_packet))
      log_str.write('  ')
    if self.vds_cksum_err is not None:
      log_str.write('vds_cksum_err = ')
      log_str.write(str(self.vds_cksum_err))
      log_str.write('  ')
    if self.vds_clone_fail is not None:
      log_str.write('vds_clone_fail = ')
      log_str.write(str(self.vds_clone_fail))
      log_str.write('  ')
    if self.vds_no_fmd is not None:
      log_str.write('vds_no_fmd = ')
      log_str.write(str(self.vds_no_fmd))
      log_str.write('  ')
    if self.vds_cloned_original is not None:
      log_str.write('vds_cloned_original = ')
      log_str.write(str(self.vds_cloned_original))
      log_str.write('  ')
    if self.vds_invalid_vnid is not None:
      log_str.write('vds_invalid_vnid = ')
      log_str.write(str(self.vds_invalid_vnid))
      log_str.write('  ')
    if self.vds_frag_err is not None:
      log_str.write('vds_frag_err = ')
      log_str.write(str(self.vds_frag_err))
      log_str.write('  ')
    if self.vds_invalid_source is not None:
      log_str.write('vds_invalid_source = ')
      log_str.write(str(self.vds_invalid_source))
      log_str.write('  ')
    if self.vds_mcast_df_bit is not None:
      log_str.write('vds_mcast_df_bit = ')
      log_str.write(str(self.vds_mcast_df_bit))
      log_str.write('  ')
    if self.vds_arp_no_route is not None:
      log_str.write('vds_arp_no_route = ')
      log_str.write(str(self.vds_arp_no_route))
      log_str.write('  ')
    if self.vds_l2_no_route is not None:
      log_str.write('vds_l2_no_route = ')
      log_str.write(str(self.vds_l2_no_route))
      log_str.write('  ')
    if self.vds_arp_reply_no_route is not None:
      log_str.write('vds_arp_reply_no_route = ')
      log_str.write(str(self.vds_arp_reply_no_route))
      log_str.write('  ')
    return log_str.getvalue()

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return -1
    read_cnt = 0
    (length, sandesh_name) = iprot.readSandeshBegin()
    if length < 0: return -1
    read_cnt += length
    while True:
      (length, fname, ftype, fid) = iprot.readFieldBegin()
      if length < 0: return -1
      read_cnt += length
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          (length, self.h_op) = iprot.readI32();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          (length, self.vds_rid) = iprot.readI16();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          (length, self.vds_discard) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          (length, self.vds_pull) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          (length, self.vds_invalid_if) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          (length, self.vds_arp_no_where_to_go) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          (length, self.vds_garp_from_vm) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          (length, self.vds_invalid_arp) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          (length, self.vds_trap_no_if) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          (length, self.vds_nowhere_to_go) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          (length, self.vds_flow_queue_limit_exceeded) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          (length, self.vds_flow_no_memory) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          (length, self.vds_flow_invalid_protocol) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          (length, self.vds_flow_nat_no_rflow) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          (length, self.vds_flow_action_drop) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          (length, self.vds_flow_action_invalid) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          (length, self.vds_flow_unusable) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          (length, self.vds_flow_table_full) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          (length, self.vds_interface_tx_discard) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          (length, self.vds_interface_drop) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          (length, self.vds_duplicated) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          (length, self.vds_push) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I64:
          (length, self.vds_ttl_exceeded) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          (length, self.vds_invalid_nh) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I64:
          (length, self.vds_invalid_label) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I64:
          (length, self.vds_invalid_protocol) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I64:
          (length, self.vds_interface_rx_discard) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I64:
          (length, self.vds_invalid_mcast_source) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          (length, self.vds_head_alloc_fail) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          (length, self.vds_head_space_reserve_fail) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I64:
          (length, self.vds_pcow_fail) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I64:
          (length, self.vds_flood) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I64:
          (length, self.vds_mcast_clone_fail) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I64:
          (length, self.vds_composite_invalid_interface) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I64:
          (length, self.vds_rewrite_fail) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I64:
          (length, self.vds_misc) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I64:
          (length, self.vds_invalid_packet) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I64:
          (length, self.vds_cksum_err) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I64:
          (length, self.vds_clone_fail) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          (length, self.vds_no_fmd) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          (length, self.vds_cloned_original) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I64:
          (length, self.vds_invalid_vnid) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I64:
          (length, self.vds_frag_err) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I64:
          (length, self.vds_invalid_source) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I64:
          (length, self.vds_mcast_df_bit) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I64:
          (length, self.vds_arp_no_route) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I64:
          (length, self.vds_l2_no_route) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I64:
          (length, self.vds_arp_reply_no_route) = iprot.readI64();
          if length < 0: return -1
          read_cnt += length
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      length = iprot.readFieldEnd()
      if length < 0: return -1
      read_cnt += length
    length = iprot.readSandeshEnd()
    if length < 0: return -1
    read_cnt += length
    return read_cnt

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return 0
    if oprot.writeSandeshBegin('vr_drop_stats_req') < 0: return -1
    if self.h_op is not None:
      annotations = {}
      if oprot.writeFieldBegin('h_op', TType.I32, 1, annotations) < 0: return -1
      if oprot.writeI32(self.h_op) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_rid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_rid', TType.I16, 2, annotations) < 0: return -1
      if oprot.writeI16(self.vds_rid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_discard is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_discard', TType.I64, 3, annotations) < 0: return -1
      if oprot.writeI64(self.vds_discard) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_pull is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_pull', TType.I64, 4, annotations) < 0: return -1
      if oprot.writeI64(self.vds_pull) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_if is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_if', TType.I64, 5, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_if) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_arp_no_where_to_go is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_arp_no_where_to_go', TType.I64, 6, annotations) < 0: return -1
      if oprot.writeI64(self.vds_arp_no_where_to_go) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_garp_from_vm is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_garp_from_vm', TType.I64, 7, annotations) < 0: return -1
      if oprot.writeI64(self.vds_garp_from_vm) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_arp is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_arp', TType.I64, 8, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_arp) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_trap_no_if is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_trap_no_if', TType.I64, 9, annotations) < 0: return -1
      if oprot.writeI64(self.vds_trap_no_if) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_nowhere_to_go is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_nowhere_to_go', TType.I64, 10, annotations) < 0: return -1
      if oprot.writeI64(self.vds_nowhere_to_go) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_queue_limit_exceeded is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_queue_limit_exceeded', TType.I64, 11, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_queue_limit_exceeded) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_no_memory is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_no_memory', TType.I64, 12, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_no_memory) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_invalid_protocol is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_invalid_protocol', TType.I64, 13, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_invalid_protocol) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_nat_no_rflow is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_nat_no_rflow', TType.I64, 14, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_nat_no_rflow) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_action_drop is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_action_drop', TType.I64, 15, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_action_drop) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_action_invalid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_action_invalid', TType.I64, 16, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_action_invalid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_unusable is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_unusable', TType.I64, 17, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_unusable) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flow_table_full is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flow_table_full', TType.I64, 18, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flow_table_full) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_interface_tx_discard is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_interface_tx_discard', TType.I64, 19, annotations) < 0: return -1
      if oprot.writeI64(self.vds_interface_tx_discard) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_interface_drop is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_interface_drop', TType.I64, 20, annotations) < 0: return -1
      if oprot.writeI64(self.vds_interface_drop) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_duplicated is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_duplicated', TType.I64, 21, annotations) < 0: return -1
      if oprot.writeI64(self.vds_duplicated) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_push is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_push', TType.I64, 22, annotations) < 0: return -1
      if oprot.writeI64(self.vds_push) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_ttl_exceeded is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_ttl_exceeded', TType.I64, 23, annotations) < 0: return -1
      if oprot.writeI64(self.vds_ttl_exceeded) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_nh is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_nh', TType.I64, 24, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_nh) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_label is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_label', TType.I64, 25, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_label) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_protocol is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_protocol', TType.I64, 26, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_protocol) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_interface_rx_discard is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_interface_rx_discard', TType.I64, 27, annotations) < 0: return -1
      if oprot.writeI64(self.vds_interface_rx_discard) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_mcast_source is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_mcast_source', TType.I64, 28, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_mcast_source) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_head_alloc_fail is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_head_alloc_fail', TType.I64, 29, annotations) < 0: return -1
      if oprot.writeI64(self.vds_head_alloc_fail) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_head_space_reserve_fail is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_head_space_reserve_fail', TType.I64, 30, annotations) < 0: return -1
      if oprot.writeI64(self.vds_head_space_reserve_fail) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_pcow_fail is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_pcow_fail', TType.I64, 31, annotations) < 0: return -1
      if oprot.writeI64(self.vds_pcow_fail) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_flood is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_flood', TType.I64, 32, annotations) < 0: return -1
      if oprot.writeI64(self.vds_flood) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_mcast_clone_fail is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_mcast_clone_fail', TType.I64, 33, annotations) < 0: return -1
      if oprot.writeI64(self.vds_mcast_clone_fail) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_composite_invalid_interface is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_composite_invalid_interface', TType.I64, 34, annotations) < 0: return -1
      if oprot.writeI64(self.vds_composite_invalid_interface) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_rewrite_fail is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_rewrite_fail', TType.I64, 35, annotations) < 0: return -1
      if oprot.writeI64(self.vds_rewrite_fail) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_misc is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_misc', TType.I64, 36, annotations) < 0: return -1
      if oprot.writeI64(self.vds_misc) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_packet is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_packet', TType.I64, 37, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_packet) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_cksum_err is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_cksum_err', TType.I64, 38, annotations) < 0: return -1
      if oprot.writeI64(self.vds_cksum_err) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_clone_fail is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_clone_fail', TType.I64, 39, annotations) < 0: return -1
      if oprot.writeI64(self.vds_clone_fail) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_no_fmd is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_no_fmd', TType.I64, 40, annotations) < 0: return -1
      if oprot.writeI64(self.vds_no_fmd) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_cloned_original is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_cloned_original', TType.I64, 41, annotations) < 0: return -1
      if oprot.writeI64(self.vds_cloned_original) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_vnid is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_vnid', TType.I64, 42, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_vnid) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_frag_err is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_frag_err', TType.I64, 43, annotations) < 0: return -1
      if oprot.writeI64(self.vds_frag_err) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_invalid_source is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_invalid_source', TType.I64, 44, annotations) < 0: return -1
      if oprot.writeI64(self.vds_invalid_source) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_mcast_df_bit is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_mcast_df_bit', TType.I64, 45, annotations) < 0: return -1
      if oprot.writeI64(self.vds_mcast_df_bit) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_arp_no_route is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_arp_no_route', TType.I64, 46, annotations) < 0: return -1
      if oprot.writeI64(self.vds_arp_no_route) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_l2_no_route is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_l2_no_route', TType.I64, 47, annotations) < 0: return -1
      if oprot.writeI64(self.vds_l2_no_route) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if self.vds_arp_reply_no_route is not None:
      annotations = {}
      if oprot.writeFieldBegin('vds_arp_reply_no_route', TType.I64, 48, annotations) < 0: return -1
      if oprot.writeI64(self.vds_arp_reply_no_route) < 0: return -1
      if oprot.writeFieldEnd() < 0: return -1
    if oprot.writeFieldStop() < 0: return -1
    if oprot.writeSandeshEnd() < 0: return -1
    return 0

  def validate(self):
    return


  def compare(self, other):
    if not isinstance(other, self.__class__):
      return False
    if self.h_op != other.h_op:
      return False
    if self.vds_rid != other.vds_rid:
      return False
    if self.vds_discard != other.vds_discard:
      return False
    if self.vds_pull != other.vds_pull:
      return False
    if self.vds_invalid_if != other.vds_invalid_if:
      return False
    if self.vds_arp_no_where_to_go != other.vds_arp_no_where_to_go:
      return False
    if self.vds_garp_from_vm != other.vds_garp_from_vm:
      return False
    if self.vds_invalid_arp != other.vds_invalid_arp:
      return False
    if self.vds_trap_no_if != other.vds_trap_no_if:
      return False
    if self.vds_nowhere_to_go != other.vds_nowhere_to_go:
      return False
    if self.vds_flow_queue_limit_exceeded != other.vds_flow_queue_limit_exceeded:
      return False
    if self.vds_flow_no_memory != other.vds_flow_no_memory:
      return False
    if self.vds_flow_invalid_protocol != other.vds_flow_invalid_protocol:
      return False
    if self.vds_flow_nat_no_rflow != other.vds_flow_nat_no_rflow:
      return False
    if self.vds_flow_action_drop != other.vds_flow_action_drop:
      return False
    if self.vds_flow_action_invalid != other.vds_flow_action_invalid:
      return False
    if self.vds_flow_unusable != other.vds_flow_unusable:
      return False
    if self.vds_flow_table_full != other.vds_flow_table_full:
      return False
    if self.vds_interface_tx_discard != other.vds_interface_tx_discard:
      return False
    if self.vds_interface_drop != other.vds_interface_drop:
      return False
    if self.vds_duplicated != other.vds_duplicated:
      return False
    if self.vds_push != other.vds_push:
      return False
    if self.vds_ttl_exceeded != other.vds_ttl_exceeded:
      return False
    if self.vds_invalid_nh != other.vds_invalid_nh:
      return False
    if self.vds_invalid_label != other.vds_invalid_label:
      return False
    if self.vds_invalid_protocol != other.vds_invalid_protocol:
      return False
    if self.vds_interface_rx_discard != other.vds_interface_rx_discard:
      return False
    if self.vds_invalid_mcast_source != other.vds_invalid_mcast_source:
      return False
    if self.vds_head_alloc_fail != other.vds_head_alloc_fail:
      return False
    if self.vds_head_space_reserve_fail != other.vds_head_space_reserve_fail:
      return False
    if self.vds_pcow_fail != other.vds_pcow_fail:
      return False
    if self.vds_flood != other.vds_flood:
      return False
    if self.vds_mcast_clone_fail != other.vds_mcast_clone_fail:
      return False
    if self.vds_composite_invalid_interface != other.vds_composite_invalid_interface:
      return False
    if self.vds_rewrite_fail != other.vds_rewrite_fail:
      return False
    if self.vds_misc != other.vds_misc:
      return False
    if self.vds_invalid_packet != other.vds_invalid_packet:
      return False
    if self.vds_cksum_err != other.vds_cksum_err:
      return False
    if self.vds_clone_fail != other.vds_clone_fail:
      return False
    if self.vds_no_fmd != other.vds_no_fmd:
      return False
    if self.vds_cloned_original != other.vds_cloned_original:
      return False
    if self.vds_invalid_vnid != other.vds_invalid_vnid:
      return False
    if self.vds_frag_err != other.vds_frag_err:
      return False
    if self.vds_invalid_source != other.vds_invalid_source:
      return False
    if self.vds_mcast_df_bit != other.vds_mcast_df_bit:
      return False
    if self.vds_arp_no_route != other.vds_arp_no_route:
      return False
    if self.vds_l2_no_route != other.vds_l2_no_route:
      return False
    if self.vds_arp_reply_no_route != other.vds_arp_reply_no_route:
      return False
    return True

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


_SANDESH_REQUEST_LIST = [
]


_SANDESH_UVE_LIST = [
]


_SANDESH_UVE_DATA_LIST = [
]


_SANDESH_ALARM_LIST = [
]


_SANDESH_ALARM_DATA_LIST = [
]
